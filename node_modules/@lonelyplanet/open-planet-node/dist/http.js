"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var createTraceToken_1 = require("./utils/createTraceToken");
var fetch = require("isomorphic-fetch");
var jsonApiError_1 = require("./jsonApiError");
var HttpClient = /** @class */ (function () {
    function HttpClient() {
    }
    HttpClient.prototype.fetch = function (url, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var requestOptions, response, error;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        requestOptions = __assign({}, __assign({}, options, { body: JSON.stringify(options.body), headers: __assign({}, options.headers, { "content-type": "application/vnd.api+json", "X-Trace-Token": createTraceToken_1.default(url) }), credentials: "include" }));
                        if (process.env.OPEN_PLANET_DEBUG) {
                            console.log(url);
                        }
                        return [4 /*yield*/, fetch(url, requestOptions)];
                    case 1:
                        response = _a.sent();
                        if (!!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.createError(url, options, response)];
                    case 2:
                        error = _a.sent();
                        throw error;
                    case 3:
                        if (!(options.method && options.method.toLowerCase() === "delete")) return [3 /*break*/, 5];
                        return [4 /*yield*/, response.text()];
                    case 4: return [2 /*return*/, _a.sent()];
                    case 5:
                        if (response.status === 204) {
                            return [2 /*return*/];
                        }
                        return [2 /*return*/, response.json()];
                }
            });
        });
    };
    HttpClient.prototype.createError = function (url, options, response) {
        return __awaiter(this, void 0, void 0, function () {
            var textBody, maybeJsonApiError;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, response.text()];
                    case 1:
                        textBody = _a.sent();
                        maybeJsonApiError = this.parseJsonApiError(textBody, response.status);
                        if (maybeJsonApiError) {
                            return [2 /*return*/, maybeJsonApiError];
                        }
                        return [2 /*return*/, new Error("Error on " + (options.method || "GET") + " " + url + ": " + textBody)];
                }
            });
        });
    };
    HttpClient.prototype.parseJsonApiError = function (textBody, statusCode) {
        try {
            var parsed = JSON.parse(textBody);
            var error = parsed.errors[0];
            if (error && (error.title || error.description)) {
                var status_1 = error.status ? "" + error.status : "" + statusCode;
                return new jsonApiError_1.default(__assign({}, error, { status: status_1 }));
            }
        }
        catch (err) {
            // ignore parsing error
        }
    };
    HttpClient = __decorate([
        inversify_1.injectable()
    ], HttpClient);
    return HttpClient;
}());
exports.default = HttpClient;
