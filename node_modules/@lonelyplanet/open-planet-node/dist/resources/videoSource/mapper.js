"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var _1 = require("./");
var mapper_1 = require("../../mapper");
var VideoSourceMapper = /** @class */ (function (_super) {
    __extends(VideoSourceMapper, _super);
    function VideoSourceMapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VideoSourceMapper.prototype.toModel = function (resource, included) {
        if (included === void 0) { included = []; }
        var model = new _1.default();
        var attrs = resource.attributes;
        model.id = resource.id;
        model.updatedAt = attrs.modify_date;
        model.createdAt = attrs.create_date;
        model.container = attrs.container;
        model.codec = attrs.codec;
        model.src = attrs.src;
        model.streamName = attrs.stream_name;
        model.appName = attrs.app_name;
        model.width = attrs.width;
        model.height = attrs.height;
        model.encodingRate = attrs.encoding_rate;
        model.size = attrs.size;
        model.sourceType = attrs.source_type;
        return model;
    };
    VideoSourceMapper.prototype.toResource = function (model) {
        var resource = {
            id: model.id,
            type: _1.videoSourceType,
            attributes: {
                modify_date: model.updatedAt,
                create_date: model.createdAt,
                container: model.container,
                codec: model.codec,
                src: model.src,
                stream_name: model.streamName,
                app_name: model.appName,
                width: model.width,
                height: model.height,
                encoding_rate: model.encodingRate,
                size: model.size,
                source_type: model.sourceType,
            },
        };
        Object.keys(resource.attributes).forEach(function (key) {
            if (typeof resource.attributes[key] === "undefined") {
                delete resource.attributes[key];
            }
        });
        return resource;
    };
    VideoSourceMapper = __decorate([
        inversify_1.injectable()
    ], VideoSourceMapper);
    return VideoSourceMapper;
}(mapper_1.default));
exports.VideoSourceMapper = VideoSourceMapper;
exports.default = VideoSourceMapper;
