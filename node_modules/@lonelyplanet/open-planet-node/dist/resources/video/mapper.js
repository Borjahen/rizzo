"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var _1 = require("./");
var mapper_1 = require("../../mapper");
var videoSource_1 = require("../videoSource");
var mapper_2 = require("../videoSource/mapper");
var mapper_3 = require("../place/mapper");
var mapper_4 = require("../poi/mapper");
var index_1 = require("../place/index");
var index_2 = require("../poi/index");
var VideoMapper = /** @class */ (function (_super) {
    __extends(VideoMapper, _super);
    function VideoMapper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.mappers = (_a = {},
            _a[index_1.placeType] = new mapper_3.default(),
            _a[index_2.poiType] = new mapper_4.default(),
            _a[videoSource_1.videoSourceType] = new mapper_2.default(),
            _a);
        return _this;
        var _a;
    }
    VideoMapper.prototype.toModel = function (resource, included) {
        var _this = this;
        if (included === void 0) { included = []; }
        var model = new _1.default();
        var relationships = resource.relationships, attrs = resource.attributes;
        model.id = resource.id;
        model.url = attrs.url;
        model.tags = attrs.tags || [];
        model.iframeEmbed = attrs.iframe_embed;
        model.html5Embed = attrs.html5_embed;
        model.updatedAt = attrs.modify_date;
        model.createdAt = attrs.create_date;
        model.name = attrs.name;
        model.slug = attrs.slug;
        model.live = attrs.live;
        model.referenceId = attrs.reference_id;
        model.shortDescription = attrs.short_description;
        model.longDescription = attrs.description;
        model.duration = attrs.duration;
        model.isSpherical = attrs.is_360;
        model.episode = attrs.episode;
        model.season = attrs.season;
        model.format = attrs.format;
        model.host = attrs.host;
        model.director = attrs.director;
        model.year = attrs.year;
        model.pixel = attrs.pixel;
        model.featuredOrder = attrs.featured_order;
        model.featuredPriority = attrs.featured_priority;
        model.spotlight = attrs.spotlight;
        model.hub = attrs.hub;
        model.thumbnailUrl = attrs.thumbnail_url;
        model.posterUrl = attrs.poster_url;
        model.heroUrl = attrs.hero_url;
        model.graphicUrl = attrs.graphic_url;
        model.providerId = attrs.provider_id;
        model.providerName = attrs.provider_name;
        model.startDate = attrs.start_date;
        model.endDate = attrs.end_date;
        if (relationships) {
            if (relationships.sources && relationships.sources.data && Array.isArray(relationships.sources.data)) {
                var sources = relationships.sources.data;
                model.sources = sources.map(function (source) { return _this.mapIncluded(source, included); });
            }
            if (relationships.places && relationships.places.data && Array.isArray(relationships.places.data)) {
                var places = relationships.places.data;
                model.places = places.map(function (place) { return _this.mapIncluded(place, included); });
            }
            if (relationships.pois && relationships.pois.data && Array.isArray(relationships.pois.data)) {
                var pois = relationships.pois.data;
                model.pois = pois.map(function (poi) { return _this.mapIncluded(poi, included); });
            }
        }
        return model;
    };
    VideoMapper.prototype.toResource = function (model) {
        var resource = {
            id: model.id,
            type: _1.videoType,
            attributes: {
                url: model.url,
                tags: model.tags,
                iframe_embed: model.iframeEmbed,
                html5_embed: model.html5Embed,
                modify_date: model.updatedAt,
                create_date: model.createdAt,
                name: model.name,
                slug: model.slug,
                live: model.live,
                reference_id: model.referenceId,
                short_description: model.shortDescription,
                description: model.longDescription,
                duration: model.duration,
                is_360: model.isSpherical,
                episode: model.episode,
                season: model.season,
                format: model.format,
                host: model.host,
                director: model.director,
                year: model.year,
                pixel: model.pixel,
                featured_order: model.featuredOrder,
                featured_priority: model.featuredPriority,
                spotlight: model.spotlight,
                hub: model.hub,
                thumbnail_url: model.thumbnailUrl,
                poster_url: model.posterUrl,
                hero_url: model.heroUrl,
                graphic_url: model.graphicUrl,
                provider_id: model.providerId,
                provider_name: model.providerName,
                start_date: model.startDate,
                end_date: model.endDate,
            }
        };
        resource.relationships = {};
        if (model.sources) {
            resource.relationships.sources = {
                data: model.sources.map(function (_a) {
                    var id = _a.id;
                    return ({
                        id: id,
                        type: videoSource_1.videoSourceType,
                    });
                })
            };
        }
        Object.keys(resource.attributes).forEach(function (key) {
            if (typeof resource.attributes[key] === "undefined") {
                delete resource.attributes[key];
            }
        });
        if (Object.keys(resource.relationships).length === 0) {
            delete resource.relationships;
        }
        return resource;
    };
    VideoMapper.prototype.mapIncluded = function (resourceIdentifier, included) {
        var resource = included.find(function (i) {
            return i.type === resourceIdentifier.type && i.id === resourceIdentifier.id;
        });
        if (!resource) {
            return resourceIdentifier;
        }
        var mapper = this.mappers[resource.type];
        if (!mapper) {
            return resourceIdentifier;
        }
        return mapper.toModel(resource, included);
    };
    VideoMapper = __decorate([
        inversify_1.injectable()
    ], VideoMapper);
    return VideoMapper;
}(mapper_1.default));
exports.VideoMapper = VideoMapper;
exports.default = VideoMapper;
