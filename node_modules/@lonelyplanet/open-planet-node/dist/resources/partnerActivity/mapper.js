"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var _1 = require("./");
var mapper_1 = require("../../mapper");
var TYPES = require("../../types");
var partnerActivityType_1 = require("./partnerActivityType");
var imgix_1 = require("../../utils/imgix");
var formattedPrice_1 = require("../../utils/formattedPrice");
var PartnerActivityMapper = /** @class */ (function (_super) {
    __extends(PartnerActivityMapper, _super);
    function PartnerActivityMapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PartnerActivityMapper.prototype.toModel = function (resource, included) {
        if (included === void 0) { included = []; }
        var model = new _1.default();
        var attrs = resource.attributes;
        model.accommodation = attrs.accommodation;
        model.canonicalCategory = attrs.canonical_category;
        model.categories = attrs.categories;
        model.departureInfo = attrs.departure_info;
        model.descriptions.longDescription = attrs.descriptions.long_description;
        model.descriptions.shortDescription = attrs.descriptions.short_description;
        model.difficulty.description = attrs.difficulty.description;
        model.difficulty.grade = attrs.difficulty.grade;
        model.difficulty.scale = attrs.difficulty.scale;
        model.durationInfo = attrs.duration_info;
        model.duration = attrs.duration;
        model.exclusions = attrs.exclusions;
        model.externalId = attrs.external_id;
        model.groupSize.averageSize = attrs.group_size.average_size;
        model.groupSize.description = attrs.group_size.description;
        model.groupSize.maximumSize = attrs.group_size.maximum_size;
        model.groupSize.minimumSize = attrs.group_size.minimum_size;
        model.highlights = attrs.highlights;
        model.id = resource.id;
        model.inclusions = attrs.inclusions;
        model.itinerary = attrs.itinerary;
        model.meals = attrs.meals;
        model.media = {
            images: attrs.media.images && attrs.media.images.length > 0 ?
                attrs.media.images.map(function (image) { return imgix_1.default(image, attrs.provider); }) :
                attrs.media.images,
            videos: attrs.media.videos,
        };
        model.name = attrs.name;
        var priceToModelPrice = function (price) {
            if (price === void 0) { price = {}; }
            return ({
                amount: price.amount,
                currency: price.currency,
                formattedAmount: formattedPrice_1.default(price.formatted_amount),
            });
        };
        if (attrs.pricing.discounted_price) {
            model.pricing.discountedPrice = priceToModelPrice(attrs.pricing.discounted_price);
        }
        if (attrs.pricing.regular_price) {
            model.pricing.regularPrice = priceToModelPrice(attrs.pricing.regular_price);
        }
        if (attrs.prices && Array.isArray(attrs.prices.regular_prices)) {
            model.prices.regularPrices = attrs.prices.regular_prices.map(priceToModelPrice);
        }
        if (attrs.prices && Array.isArray(attrs.prices.discounted_prices)) {
            model.prices.discountedPrices = attrs.prices.discounted_prices.map(priceToModelPrice);
        }
        model.provider = attrs.provider;
        model.rating = attrs.rating;
        model.returnInfo = attrs.return_info;
        model.reviewCount = attrs.review_count;
        model.staffExperts = attrs.staff_experts;
        model.transport = attrs.transport;
        var places = resource.relationships["places"].data;
        if (places && places.length) {
            model.containingPlaceId = places[0].id;
        }
        model.map = resource.links.map;
        model.images = resource.links.image ? [{
                url: imgix_1.default(resource.links.image, attrs.provider),
                attribution: [{
                        name: "",
                        organization: attrs.provider,
                    }],
                caption: "",
                height: 0,
                orientation: "landscape",
                path: resource.links.image.substr(resource.links.image.lastIndexOf(".com/") + 4, resource.links.image.length),
                tags: [],
                width: 0,
            }] : [];
        model.booking = resource.links.booking;
        model.activityType = partnerActivityType_1.isTourOrActivity(attrs.duration);
        return model;
    };
    PartnerActivityMapper.prototype.toResource = function (model) {
        var modelPriceToResourcePrice = function (price) { return ({
            amount: price.amount,
            currency: price.currency,
            formatted_amount: price.formattedAmount,
        }); };
        var resource = {
            id: model.id,
            type: _1.partnerActivityType,
            attributes: {
                accommodation: model.accommodation,
                canonical_category: model.canonicalCategory,
                categories: model.categories,
                departure_info: model.departureInfo,
                descriptions: {
                    long_description: model.descriptions.longDescription,
                    short_description: model.descriptions.shortDescription,
                },
                difficulty: {
                    description: model.difficulty.description,
                    grade: model.difficulty.grade,
                    scale: model.difficulty.scale,
                },
                duration: {
                    duration: model.duration.duration,
                    unit: model.duration.unit,
                },
                duration_info: model.durationInfo,
                exclusions: model.exclusions,
                external_id: model.externalId,
                group_size: {
                    average_size: model.groupSize.averageSize,
                    description: model.groupSize.description,
                    maximum_size: model.groupSize.maximumSize,
                    minimum_size: model.groupSize.minimumSize,
                },
                highlights: model.highlights,
                id: model.id,
                inclusions: model.inclusions,
                itinerary: model.itinerary,
                meals: model.meals,
                media: model.media,
                name: model.name,
                prices: {
                    discounted_prices: model.prices.discountedPrices.map(modelPriceToResourcePrice),
                    regular_prices: model.prices.regularPrices.map(modelPriceToResourcePrice),
                },
                pricing: {
                    discounted_price: {
                        amount: model.pricing.discountedPrice.amount,
                        currency: model.pricing.discountedPrice.currency,
                        formatted_amount: model.pricing.discountedPrice.formattedAmount,
                    },
                    regular_price: {
                        amount: model.pricing.regularPrice.amount,
                        currency: model.pricing.regularPrice.currency,
                        formatted_amount: model.pricing.regularPrice.formattedAmount,
                    },
                },
                provider: model.provider,
                rating: model.rating,
                return_info: model.returnInfo,
                review_count: model.reviewCount,
                staff_experts: model.staffExperts,
                transport: model.transport,
            },
        };
        return resource;
    };
    __decorate([
        inversify_1.inject(TYPES.Bookmark),
        __metadata("design:type", Object)
    ], PartnerActivityMapper.prototype, "model", void 0);
    PartnerActivityMapper = __decorate([
        inversify_1.injectable()
    ], PartnerActivityMapper);
    return PartnerActivityMapper;
}(mapper_1.default));
exports.PartnerActivityMapper = PartnerActivityMapper;
exports.default = PartnerActivityMapper;
