"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var _1 = require("./");
var associationEntry_1 = require("../associationEntry");
var mapper_1 = require("../poi/mapper");
var mapper_2 = require("../partnerActivity/mapper");
var mapper_3 = require("../lodging/mapper");
var mapper_4 = require("../associationEntry/mapper");
var mapper_5 = require("../../mapper");
var mappers = {
    poi: new mapper_1.default(),
    lodging: new mapper_3.default(),
    partner_activity: new mapper_2.default(),
};
var AssociationMapper = /** @class */ (function (_super) {
    __extends(AssociationMapper, _super);
    function AssociationMapper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.associationEntryMapper = new mapper_4.default();
        return _this;
    }
    AssociationMapper.prototype.toModel = function (resource, included) {
        var _this = this;
        if (included === void 0) { included = []; }
        var model = new _1.default();
        var attrs = resource.attributes;
        model.id = resource.id;
        model.associationType = attrs.association_type;
        model.createdAt = attrs.created_at;
        model.status = attrs.status;
        model.targetTypes = attrs.target_types;
        model.updatedAt = attrs.updated_at;
        model.entries = included.filter(function (i) { return i.type === associationEntry_1.associationEntryType; })
            .filter(function (i) {
            var isArray = Array.isArray(resource.relationships.entries.data);
            var entries = (isArray ?
                resource.relationships.entries.data :
                resource.relationships.entries.data && [resource.relationships.entries.data]);
            if (entries) {
                return entries.some(function (e) { return e.id === i.id; });
            }
            return false;
        })
            .map(function (b) {
            return _this.associationEntryMapper.toModel(b, included);
        });
        if (resource.relationships.source) {
            var sourceResource = resource.relationships.source.data;
            model.source = this.mapIncluded(sourceResource, included);
        }
        if (resource.relationships.suggestions && resource.relationships.suggestions.data) {
            model.suggestions = resource.relationships.suggestions.data.map(function (item) {
                return _this.mapIncluded(item, included);
            });
        }
        return model;
    };
    AssociationMapper.prototype.toResource = function (model) {
        var resource = {
            id: model.id,
            type: _1.associationType,
            attributes: {
                association_type: model.associationType,
                created_at: model.createdAt,
                status: model.status,
                target_types: model.targetTypes,
                updated_at: model.updatedAt
            },
        };
        resource.relationships = {};
        if (model.source) {
            resource.relationships.source = {
                data: {
                    type: model.source.type,
                    id: model.source.id
                }
            };
        }
        if (model.suggestions) {
            resource.relationships.suggestions = {
                data: model.suggestions.map(function (s) { return ({
                    type: s.type,
                    id: s.id,
                }); }),
            };
        }
        Object.keys(resource.attributes).forEach(function (key) {
            if (typeof resource.attributes[key] === "undefined") {
                delete resource.attributes[key];
            }
        });
        if (Object.keys(resource.relationships).length === 0) {
            delete resource.relationships;
        }
        return resource;
    };
    AssociationMapper.prototype.mapIncluded = function (resourceIdentifier, included) {
        var resource = included.find(function (i) {
            return i.type === resourceIdentifier.type && i.id === resourceIdentifier.id;
        });
        if (!resource) {
            return resourceIdentifier;
        }
        var mapper = mappers[resource.type];
        return mapper.toModel(resource, included);
    };
    AssociationMapper = __decorate([
        inversify_1.injectable()
    ], AssociationMapper);
    return AssociationMapper;
}(mapper_5.default));
exports.AssociationMapper = AssociationMapper;
exports.default = AssociationMapper;
