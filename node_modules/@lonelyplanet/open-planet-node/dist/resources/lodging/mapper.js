"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var mapper_1 = require("../../mapper");
var TYPES = require("../../types");
var poi_1 = require("../poi");
var mapper_2 = require("../poi/mapper");
var _1 = require("./");
var image_1 = require("../image");
var hotelProvider_1 = require("../../utils/hotelProvider");
var imgix_1 = require("../../utils/imgix");
var placeUtilities_1 = require("../../utils/placeUtilities");
var LodgingMapper = /** @class */ (function (_super) {
    __extends(LodgingMapper, _super);
    function LodgingMapper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.poiMapper = new mapper_2.default();
        return _this;
    }
    LodgingMapper.prototype.toModel = function (resource, included) {
        if (included === void 0) { included = []; }
        var providerId;
        var model = new _1.default();
        var attrs = resource.attributes;
        model.id = resource.id;
        model.address = attrs.address;
        model.location = attrs.location;
        model.name = attrs.name;
        model.attributes = attrs.attributes;
        model.poiType = attrs.poi_type;
        model.price = attrs.price_string;
        model.priceRange = attrs.price_range;
        model.review = attrs.review;
        model.lpInternalScore = attrs.score;
        model.searchableName = attrs.searchable_name;
        model.starRating = attrs.star_rating;
        model.subtypes = attrs.subtypes;
        model.containingPlaceId = resource.relationships["containing-place"].data.id;
        model.type = resource.type;
        if (resource.relationships.poi && resource.relationships.poi.data) {
            var poi = included.find(function (r) {
                return r.type === poi_1.poiType &&
                    r.id === resource.relationships.poi.data.id;
            });
            if (poi) {
                model.poi = this.poiMapper.toModel(poi);
            }
            else {
                model.poi = resource.relationships.poi.data;
            }
        }
        var place = included.find(function (resource) { return resource.id === model.containingPlaceId; });
        if (place) {
            model.containingPlaceName = place.attributes.name;
        }
        if (place) {
            var ancestry = place.relationships["ancestry"].data || [];
            placeUtilities_1.assignContainingPlaces(included, [place].concat(ancestry), model);
            placeUtilities_1.assignCity(included, ancestry, place, model);
            placeUtilities_1.assignContinent(included, ancestry, place, model);
            placeUtilities_1.assignCountry(included, ancestry, place, model);
            placeUtilities_1.assignNeighborhood(included, ancestry, place, model);
            placeUtilities_1.assignRegions(included, ancestry, place, model);
        }
        var providers = included.filter(function (resource) {
            return resource.type === _1.lodgingProviderType &&
                model.id === resource.relationships.lodging.data.id;
        });
        if (providers) {
            providerId = hotelProvider_1.default(providers);
            model.providers = providers.map(function (p) { return (__assign({}, p.attributes, { id: p.id, provider: providerId, lodgingType: p.attributes.lodging_type })); });
        }
        var images = included.filter(function (resource) {
            return resource.type === image_1.imageType &&
                model.id === resource.relationships.lodging.data.id;
        });
        if (images) {
            model.images = images.map(function (image) { return ({
                attribution: image.attributes.attribution,
                path: image.attributes.path,
                caption: image.attributes.caption,
                height: image.attributes.height,
                width: image.attributes.width,
                orientation: image.attributes.orientation,
                tags: image.attributes.tags || [],
                url: imgix_1.default(image.links.pixels, providerId),
            }); });
        }
        return model;
    };
    LodgingMapper.prototype.toResource = function (model) {
        var resource = {
            id: model.id,
            type: _1.lodgingType,
            attributes: {
                address: model.address,
                attributes: model.attributes,
                location: model.location,
                name: model.name,
                poi_type: model.poiType,
                price_range: model.priceRange,
                price_string: model.price,
                review: model.review,
                rich_hours_string: model.richHoursString,
                score: model.lpInternalScore,
                searchable_name: model.searchableName,
                star_rating: model.starRating,
                subtypes: model.subtypes,
            },
        };
        return resource;
    };
    __decorate([
        inversify_1.inject(TYPES.Bookmark),
        __metadata("design:type", Object)
    ], LodgingMapper.prototype, "model", void 0);
    LodgingMapper = __decorate([
        inversify_1.injectable()
    ], LodgingMapper);
    return LodgingMapper;
}(mapper_1.default));
exports.default = LodgingMapper;
