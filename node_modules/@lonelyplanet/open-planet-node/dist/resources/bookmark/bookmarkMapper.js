"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var bookmark_1 = require("../bookmark");
var mapper_1 = require("../../mapper");
var TYPES = require("../../types");
var mapper_2 = require("../poi/mapper");
var mapper_3 = require("../partnerActivity/mapper");
var mappers = {
    poi: new mapper_2.default(),
    lodging: new mapper_2.default(),
    partner_activity: new mapper_3.default(),
};
var BookmarkMapper = /** @class */ (function (_super) {
    __extends(BookmarkMapper, _super);
    function BookmarkMapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BookmarkMapper.prototype.toModel = function (resource, included) {
        if (included === void 0) { included = []; }
        var model = new bookmark_1.default();
        model.id = resource.id;
        model.checked = resource.attributes.checked;
        model.createdAt = new Date(resource.attributes.created_at);
        model.order = resource.attributes.order_number;
        model.note = resource.attributes.note;
        if (resource.relationships.target) {
            var targetResource_1 = resource.relationships.target.data;
            var target = included.find(function (i) { return i.type === targetResource_1.type && i.id === targetResource_1.id; });
            if (target) {
                var mapper = mappers[target.type];
                model.target = mapper.toModel(target, included);
            }
            else {
                model.target = resource.relationships.target.data;
            }
        }
        return model;
    };
    BookmarkMapper.prototype.toResource = function (model) {
        var resource = {
            id: model.id,
            type: bookmark_1.bookmarkEntryType,
            attributes: {
                checked: model.checked,
                order_number: model.order,
                note: model.note,
            },
            relationships: {},
        };
        if (model.target) {
            resource.relationships.target = {
                data: {
                    type: model.target.type,
                    id: model.target.id,
                }
            };
        }
        return resource;
    };
    __decorate([
        inversify_1.inject(TYPES.Bookmark),
        __metadata("design:type", Object)
    ], BookmarkMapper.prototype, "model", void 0);
    BookmarkMapper = __decorate([
        inversify_1.injectable()
    ], BookmarkMapper);
    return BookmarkMapper;
}(mapper_1.default));
exports.BookmarkMapper = BookmarkMapper;
exports.default = BookmarkMapper;
