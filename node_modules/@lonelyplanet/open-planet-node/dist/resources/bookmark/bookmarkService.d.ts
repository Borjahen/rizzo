import BaseService from "../../service";
import { IService, IResourceMapper } from "../../interfaces";
import Bookmark, { IBookmark, IBookmarkEntryResource } from "../bookmark";
import { IBookmarkList } from "../bookmarkList";
export interface IBookmarkService extends IService<IBookmark> {
    addBookmarkToList(userId: string, bookmark: IBookmark, list: IBookmarkList): Promise<IBookmark>;
    updateBookmark(userId: string, bookmark: IBookmark, list: IBookmarkList): Promise<Bookmark>;
    isResourceBookmarked(userId: any, targetId: any): Promise<IBookmark[]>;
}
export default class BookmarkService extends BaseService<IBookmark, IBookmarkEntryResource> implements IBookmarkService {
    resource: string;
    mapper: IResourceMapper<IBookmark, IBookmarkEntryResource>;
    url({userId, listId}: {
        userId: any;
        listId: any;
    }): string;
    addBookmarkToList(userId: string, bookmark: IBookmark, list: IBookmarkList): Promise<Bookmark<{}>>;
    updateOrInsertBookmarksToList(userId: string, bookmarks: IBookmark[], list: IBookmarkList): Promise<IBookmark<{}>[]>;
    updateBookmark(userId: string, bookmark: IBookmark, list: IBookmarkList): Promise<Bookmark<{}>>;
    isResourceBookmarked(userId: any, targetId: any): Promise<IBookmark[]>;
}
