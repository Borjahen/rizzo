import BaseService from "../../service";
import { IService, IResourceMapper, IFindParams } from "../../interfaces";
import { ITag, ITagResource, ITagAssociationResource, ITopic, ITopicResource } from "./";
export interface ITagService extends IService<ITag> {
    addTagToResource(tag: ITag): Promise<ITag>;
    findByResource(id: string, type: string, options?: IFindParams): Promise<ITag[]>;
    deleteAssociation(id: string): void;
    findTopic(options?: IFindParams): Promise<ITopic[]>;
}
export default class TagService extends BaseService<ITag, ITagResource | ITagAssociationResource> implements ITagService {
    resource: string;
    mapper: IResourceMapper<ITag, ITagResource | ITagAssociationResource>;
    topicMapper: IResourceMapper<ITopic, ITopicResource>;
    url(): string;
    tagAssociationUrl(): string;
    findByResource(id: string, type: string, options?: IFindParams): Promise<ITag[]>;
    addTagToResource(tag: ITag): Promise<ITag>;
    deleteAssociation(id: any): Promise<void>;
    findTopic(options?: IFindParams): Promise<ITopic[]>;
    headers(): {
        "Accept-Version": string;
        constructor: Function;
        toString(): string;
        toLocaleString(): string;
        valueOf(): Object;
        hasOwnProperty(v: string): boolean;
        hasOwnProperty(v: PropertyKey): boolean;
        isPrototypeOf(v: Object): boolean;
        propertyIsEnumerable(v: string): boolean;
        propertyIsEnumerable(v: PropertyKey): boolean;
    };
}
