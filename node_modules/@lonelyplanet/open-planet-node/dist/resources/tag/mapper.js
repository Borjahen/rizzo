"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var mapper_1 = require("../../mapper");
var TYPES = require("../../types");
var _1 = require("./");
var PoiMapper = /** @class */ (function (_super) {
    __extends(PoiMapper, _super);
    function PoiMapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PoiMapper.prototype.toModel = function (resource, included) {
        if (included === void 0) { included = []; }
        var model = new _1.default();
        if (resource.type === _1.tagType) {
            this.mapFromTag(model, resource, included);
        }
        else {
            this.mapFromTagAssociation(model, resource);
        }
        return model;
    };
    PoiMapper.prototype.mapFromTagAssociation = function (model, resource) {
        model.associationId = resource.id;
        model.name = resource.attributes.label;
        var tag = resource.relationships["tag"].data;
        if (tag) {
            model.id = tag.id;
        }
        var target = resource.relationships["target"].data;
        model.targetId = target.id;
        model.targetType = target.type;
    };
    PoiMapper.prototype.mapFromTag = function (model, resource, included) {
        model.id = resource.id;
        model.name = resource.attributes.name;
        var relationships = resource.relationships["tag-associations"];
        if (relationships.data) {
            var associationRelationships = Array.isArray(relationships.data) ? relationships.data : [relationships.data];
            var associationRel_1 = associationRelationships[0];
            model.associationId = associationRel_1.id;
            var association = included.find(function (i) { return i.id === associationRel_1.id && i.type === _1.tagAssociationType; });
            if (association) {
                var target = association.relationships.target.data;
                model.targetId = target.id;
                model.targetType = target.type;
            }
        }
    };
    PoiMapper.prototype.toResource = function (model) {
        var resource = {
            id: model.associationId,
            type: _1.tagType,
            attributes: {
                name: model.name,
            },
            relationships: {},
        };
        resource.relationships = {
            target: {
                data: {
                    type: model.targetType,
                    id: model.targetId
                }
            },
            tag: {
                data: {
                    type: _1.tagType,
                    id: model.id,
                }
            }
        };
        return resource;
    };
    __decorate([
        inversify_1.inject(TYPES.Bookmark),
        __metadata("design:type", Object)
    ], PoiMapper.prototype, "model", void 0);
    PoiMapper = __decorate([
        inversify_1.injectable()
    ], PoiMapper);
    return PoiMapper;
}(mapper_1.default));
exports.PoiMapper = PoiMapper;
exports.default = PoiMapper;
