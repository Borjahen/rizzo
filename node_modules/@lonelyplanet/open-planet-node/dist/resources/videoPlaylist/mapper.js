"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var _1 = require("./");
var mapper_1 = require("../../mapper");
var mapper_2 = require("../videoPlaylistItem/mapper");
var index_1 = require("../videoPlaylistItem/index");
var VideoPlaylistMapper = /** @class */ (function (_super) {
    __extends(VideoPlaylistMapper, _super);
    function VideoPlaylistMapper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.playlistItemMapper = new mapper_2.VideoPlaylistItemMapper();
        return _this;
    }
    VideoPlaylistMapper.prototype.toModel = function (resource, included) {
        var _this = this;
        if (included === void 0) { included = []; }
        var model = new _1.default();
        var relationships = resource.relationships, attrs = resource.attributes;
        model.id = resource.id;
        model.referenceId = attrs.reference_id;
        model.providerName = attrs.provider_name;
        model.providerId = attrs.provider_id;
        model.createdAt = attrs.create_date;
        model.updatedAt = attrs.modify_date;
        model.slug = attrs.slug;
        model.name = attrs.name;
        model.playlistType = attrs.playlist_type;
        if (relationships && relationships.items && Array.isArray(relationships.items.data)) {
            var data = resource.relationships.items.data;
            model.items = data.map(function (itemResourceLinkage) {
                var item = included.find(function (i) { return i.type === index_1.videoPlaylistItemType && i.id === itemResourceLinkage.id; });
                if (item) {
                    return _this.playlistItemMapper.toModel(item, included);
                }
                else {
                    return itemResourceLinkage;
                }
            });
        }
        return model;
    };
    VideoPlaylistMapper.prototype.toResource = function (model) {
        var resource = {
            id: model.id,
            type: _1.videoPlaylistType,
            attributes: {
                reference_id: model.referenceId,
                provider_name: model.providerName,
                provider_id: model.providerId,
                slug: model.slug,
                name: model.name,
                playlist_type: model.playlistType,
            },
            relationships: {
                items: {
                    data: []
                }
            }
        };
        if (model.items) {
            resource.relationships.items.data = model.items.map(function (_a) {
                var id = _a.id;
                return ({
                    id: id,
                    type: index_1.videoPlaylistItemType,
                });
            });
        }
        Object.keys(resource.attributes).forEach(function (key) {
            if (typeof resource.attributes[key] === "undefined") {
                delete resource.attributes[key];
            }
        });
        if (Object.keys(resource.relationships).length === 0) {
            delete resource.relationships;
        }
        return resource;
    };
    VideoPlaylistMapper = __decorate([
        inversify_1.injectable()
    ], VideoPlaylistMapper);
    return VideoPlaylistMapper;
}(mapper_1.default));
exports.VideoPlaylistMapper = VideoPlaylistMapper;
exports.default = VideoPlaylistMapper;
