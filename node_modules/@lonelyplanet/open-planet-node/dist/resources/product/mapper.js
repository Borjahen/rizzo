"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var _1 = require("./");
var mapper_1 = require("../../mapper");
var ProductMapper = /** @class */ (function (_super) {
    __extends(ProductMapper, _super);
    function ProductMapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProductMapper.prototype.toModel = function (resource, included) {
        if (included === void 0) { included = []; }
        var model = new _1.default();
        var attrs = resource.attributes;
        model.id = resource.id;
        model.authors = attrs.authors;
        model.category = attrs.category;
        model.descriptions.longDescription = attrs.descriptions.long_description;
        model.descriptions.shortDescription = attrs.descriptions.short_description;
        model.edition = attrs.edition;
        model.images.original = attrs.images.original;
        if (attrs.images.small && Array.isArray(attrs.images.small)) {
            model.images.small = attrs.images.small;
        }
        if (attrs.images.medium && Array.isArray(attrs.images.medium)) {
            model.images.medium = attrs.images.medium;
        }
        if (attrs.images.large && Array.isArray(attrs.images.large)) {
            model.images.large = attrs.images.large;
        }
        model.isBundle = attrs.is_bundle;
        model.isChapter = attrs.is_chapter;
        model.isDigital = attrs.digital;
        model.isbn = attrs.isbn;
        model.pageColourCount = attrs.page_colour_count;
        model.pageCount = attrs.page_count;
        model.pageMapsCount = attrs.page_maps_count;
        model.productType = attrs.product_type;
        model.releaseDate = new Date(attrs.release_date);
        model.score = attrs.score;
        model.title = attrs.title;
        model.shop = resource.links.shop;
        var priceToModelPrice = function (price) {
            if (price === void 0) { price = {}; }
            return ({
                amount: price.amount,
                currency: price.currency,
            });
        };
        if (attrs.pricing && Array.isArray(attrs.pricing)) {
            model.pricing = attrs.pricing.map(priceToModelPrice);
        }
        var places = resource.relationships["places"].data;
        if (places && places.length) {
            model.containingPlaceIds = places.map(function (place) { return place.id; });
        }
        return model;
    };
    ProductMapper.prototype.toResource = function (model) {
        var modelPriceToResourcePrice = function (price) { return ({
            amount: price.amount,
            currency: price.currency,
        }); };
        var resource = {
            id: model.id,
            type: _1.productType,
            attributes: {
                authors: model.authors,
                category: model.category,
                descriptions: {
                    long_description: model.descriptions.longDescription,
                    short_description: model.descriptions.shortDescription,
                },
                digital: model.isDigital,
                edition: model.edition,
                images: {
                    original: model.images.original,
                    small: model.images.small,
                    medium: model.images.medium,
                    large: model.images.large,
                },
                is_bundle: model.isBundle,
                is_chapter: model.isChapter,
                isbn: model.isbn,
                page_colour_count: model.pageColourCount,
                page_count: model.pageCount,
                page_maps_count: model.pageMapsCount,
                pricing: model.pricing.map(modelPriceToResourcePrice),
                product_type: model.productType,
                release_date: model.releaseDate.toISOString().toString(),
                score: model.score,
                title: model.title,
            },
        };
        return resource;
    };
    ProductMapper = __decorate([
        inversify_1.injectable()
    ], ProductMapper);
    return ProductMapper;
}(mapper_1.default));
exports.ProductMapper = ProductMapper;
exports.default = ProductMapper;
