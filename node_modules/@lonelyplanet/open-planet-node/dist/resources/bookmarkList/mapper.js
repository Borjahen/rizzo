"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var bookmark_1 = require("../bookmark");
var bookmarkList_1 = require("../bookmarkList");
var mapper_1 = require("../../mapper");
var bookmarkMapper_1 = require("../bookmark/bookmarkMapper");
var TYPES = require("../../types");
var BookmarkListMapper = /** @class */ (function (_super) {
    __extends(BookmarkListMapper, _super);
    function BookmarkListMapper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.bookmarkMapper = new bookmarkMapper_1.default();
        return _this;
    }
    BookmarkListMapper.prototype.toModel = function (resource, included) {
        var _this = this;
        if (included === void 0) { included = []; }
        var model = new bookmarkList_1.default();
        model.id = resource.id;
        model.entries = included.filter(function (i) { return i.type === bookmark_1.bookmarkEntryType; })
            .filter(function (i) {
            var isArray = Array.isArray(resource.relationships.entries.data);
            var entries = (isArray ?
                resource.relationships.entries.data :
                resource.relationships.entries.data && [resource.relationships.entries.data]);
            if (entries) {
                return entries.some(function (e) { return e.id === i.id; });
            }
            return false;
        })
            .map(function (b) {
            return _this.bookmarkMapper.toModel(b, included);
        });
        model.name = resource.attributes.name;
        model.visibility = resource.attributes.visibility;
        model.source = resource.attributes.source;
        model.updatedAt = new Date(resource.attributes.updated_at);
        model.insertedAt = new Date(resource.attributes.inserted_at);
        model.extra = resource.attributes.extra;
        model.expectedEntriesCount = resource.attributes.entries_count;
        return model;
    };
    BookmarkListMapper.prototype.toResource = function (model) {
        var resource = {
            id: model.id,
            type: bookmarkList_1.bookmarkListType,
            attributes: {
                name: model.name,
                visibility: model.visibility,
                source: model.source,
                extra: model.extra,
            },
        };
        Object.keys(resource.attributes).forEach(function (key) {
            if (typeof resource.attributes[key] === "undefined") {
                delete resource.attributes[key];
            }
        });
        return resource;
    };
    __decorate([
        inversify_1.inject(TYPES.Bookmark),
        __metadata("design:type", Object)
    ], BookmarkListMapper.prototype, "model", void 0);
    BookmarkListMapper = __decorate([
        inversify_1.injectable()
    ], BookmarkListMapper);
    return BookmarkListMapper;
}(mapper_1.default));
exports.BookmarkListMapper = BookmarkListMapper;
exports.default = BookmarkListMapper;
