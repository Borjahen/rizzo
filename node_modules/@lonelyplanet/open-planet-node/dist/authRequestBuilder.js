"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var AuthRequestBuilder = /** @class */ (function () {
    function AuthRequestBuilder(params) {
        this.options = params.options;
        this.authUri = params.host + "/oauth/authorize";
    }
    AuthRequestBuilder.build = function (params) {
        var builder = new AuthRequestBuilder(params);
        return {
            builder: builder,
            googleLink: builder.getLoginUrl("google", params.options.targetLinkUri),
            twitterLink: builder.getLoginUrl("twitter", params.options.targetLinkUri),
            facebookLink: builder.getLoginUrl("facebook", params.options.targetLinkUri),
            passwordLink: builder.getLoginUrl("password", params.options.targetLinkUri),
            passwordlessLink: function (email) { return builder.getLoginUrl("passwordless", params.options.targetLinkUri, {
                "login_hint": email
            }); }
        };
    };
    AuthRequestBuilder.prototype.buildUrl = function (queryObject) {
        var queryWithDefaults = __assign({}, utils_1.mapCamelCaseToUnderscore(utils_1.stringifyArrayParams(this.options)), utils_1.mapCamelCaseToUnderscore(utils_1.stringifyArrayParams(queryObject)));
        return this.authUri + "?" + utils_1.formatQueryString(queryWithDefaults);
    };
    AuthRequestBuilder.prototype.getLoginUrl = function (authMethod, redirect, settings) {
        if (settings === void 0) { settings = {}; }
        var queryObject = __assign({ auth_method: authMethod, target_link_uri: redirect, response_type: "code", prompt: "login" }, settings);
        return this.buildUrl(queryObject);
    };
    AuthRequestBuilder.prototype.getRefreshUrl = function (authMethod, redirect, settings) {
        if (settings === void 0) { settings = {}; }
        var queryObject = __assign({ auth_method: authMethod, target_link_uri: redirect, response_type: "ajax" }, settings);
        return this.buildUrl(queryObject);
    };
    AuthRequestBuilder.prototype.getAccessTokenUrl = function () {
        var query = {
            response_type: "token id_token",
            response_mode: "ajax",
            target_link_uri: "https://www.lonelyplanet.com",
            auth_method: "none",
            nonce: "null",
        };
        return this.buildUrl(query);
    };
    return AuthRequestBuilder;
}());
exports.default = AuthRequestBuilder;
