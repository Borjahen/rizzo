"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var authRequestBuilder_1 = require("../authRequestBuilder");
var authRequestInstance;
var myOptions;
beforeAll(function () {
    myOptions = {
        host: "https://connect.test.com",
        options: {
            clientId: "000123",
            redirectUri: "https://connect.test.com/sso",
            scope: [
                "openid",
                "profile",
                "op:users:self:social-accounts:*:d",
            ],
        }
    };
    authRequestInstance = new authRequestBuilder_1.default(myOptions);
});
describe("AuthRequestBuilder", function () {
    it("it creates an authentication url", function () {
        var authUrl = authRequestInstance.getLoginUrl("twitter", "www.lp.com", {
            claimsLocales: [
                "test",
                "test2"
            ],
        });
        expect(authUrl).toEqual("https://connect.test.com/oauth/authorize?client_id=000123&redirect_uri=https%3A%2F%2Fconnect.test.com%2Fsso&scope=openid%20profile%20op%3Ausers%3Aself%3Asocial-accounts%3A*%3Ad&auth_method=twitter&target_link_uri=www.lp.com&response_type=code&prompt=login&claims_locales=test%20test2");
    });
    it("it creates an auth url for passwordless login", function () {
        var authUrl = authRequestInstance.getLoginUrl("passwordless", "www.lp.com", {
            "login_hint": "test@test.com"
        });
        expect(authUrl).toEqual("https://connect.test.com/oauth/authorize?client_id=000123&redirect_uri=https%3A%2F%2Fconnect.test.com%2Fsso&scope=openid%20profile%20op%3Ausers%3Aself%3Asocial-accounts%3A*%3Ad&auth_method=passwordless&target_link_uri=www.lp.com&response_type=code&prompt=login&login_hint=test%40test.com");
    });
    it("it creates a refresh url", function () {
        var authUrl = authRequestInstance.getRefreshUrl("twitter", "www.lp.com");
        expect(authUrl).toEqual("https://connect.test.com/oauth/authorize?client_id=000123&redirect_uri=https%3A%2F%2Fconnect.test.com%2Fsso&scope=openid%20profile%20op%3Ausers%3Aself%3Asocial-accounts%3A*%3Ad&auth_method=twitter&target_link_uri=www.lp.com&response_type=ajax");
    });
    it("it allows you to build all auth links at once", function () {
        var expedtedRoot = "https://connect.test.com/oauth/authorize";
        var expectedQueryString = function (method) { return "client_id=000123&redirect_uri=https%3A%2F%2Fconnect.test.com%2Fsso&scope=openid%20profile%20op%3Ausers%3Aself%3Asocial-accounts%3A*%3Ad&target_link_uri=www.lp.com&auth_method=" + method + "&response_type=code&prompt=login"; };
        var expectedFacebookLink = expedtedRoot + "?" + expectedQueryString("facebook");
        var expectedTwitterLink = expedtedRoot + "?" + expectedQueryString("twitter");
        var expectedGoogleLink = expedtedRoot + "?" + expectedQueryString("google");
        var expectedPasswordLink = expedtedRoot + "?" + expectedQueryString("password");
        var expectedPasswordlessLink = expedtedRoot + "?" + expectedQueryString("passwordless") + "&login_hint=" + encodeURIComponent("test@test.com");
        var _a = authRequestBuilder_1.default.build({
            host: "https://connect.test.com",
            options: {
                clientId: "000123",
                redirectUri: "https://connect.test.com/sso",
                scope: [
                    "openid",
                    "profile",
                    "op:users:self:social-accounts:*:d",
                ],
                targetLinkUri: "www.lp.com",
            }
        }), facebookLink = _a.facebookLink, twitterLink = _a.twitterLink, googleLink = _a.googleLink, passwordLink = _a.passwordLink, passwordlessLink = _a.passwordlessLink, builder = _a.builder;
        var finalPasswordlessLink = passwordlessLink("test@test.com");
        expect(facebookLink).toEqual(expectedFacebookLink);
        expect(twitterLink).toEqual(expectedTwitterLink);
        expect(googleLink).toEqual(expectedGoogleLink);
        expect(passwordLink).toEqual(expectedPasswordLink);
        expect(finalPasswordlessLink).toEqual(expectedPasswordlessLink);
        expect(builder).toBeInstanceOf(authRequestBuilder_1.default);
    });
});
