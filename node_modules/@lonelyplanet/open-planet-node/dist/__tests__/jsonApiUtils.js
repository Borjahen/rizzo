"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var jsonApiUtils_1 = require("../jsonApiUtils");
describe("jsonApiUtils", function () {
    it("should create filters", function () {
        var str = jsonApiUtils_1.createFilters({
            username: "jc",
            resource: "user",
        });
        expect(str).toEqual("filter[user][username][equals]=jc");
    });
    it("should support like searches", function () {
        var str = jsonApiUtils_1.createFilters({
            username: {
                like: "jc"
            },
            resource: "user",
        });
        expect(str).toEqual("filter[user][username][like]=jc");
    });
    it("should support custom searches", function () {
        var str = jsonApiUtils_1.createFilters({
            username: {
                has_ancestor: 362228,
            },
            resource: "user",
        });
        expect(str).toEqual("filter[user][username][has_ancestor]=362228");
    });
    it("should support object queries", function () {
        var str = jsonApiUtils_1.createFilters({
            resource: "user",
            foo: {
                bar: "baz",
            },
        });
        expect(str).toEqual("filter[user][foo][bar]=baz");
    });
    it('should encode query strings', function () {
        var str = jsonApiUtils_1.createFilters({
            resource: "user",
            foo: "Tours & Sightseeing",
        });
        expect(str).toEqual("filter[user][foo][equals]=Tours%20%26%20Sightseeing");
    });
    it('should leave previously encoded query strings encoded', function () {
        var str = jsonApiUtils_1.createFilters({
            resource: "user",
            foo: "Tours%20%26%20Sightseeing",
        });
        expect(str).toEqual("filter[user][foo][equals]=Tours%20%26%20Sightseeing");
    });
    it('should encode object query strings', function () {
        var str = jsonApiUtils_1.createFilters({
            resource: "user",
            foo: {
                bar: "Tours & Sightseeing",
            },
        });
        expect(str).toEqual("filter[user][foo][bar]=Tours%20%26%20Sightseeing");
    });
    it('should ignore commas when encoding query strings', function () {
        var str = jsonApiUtils_1.createFilters({
            resource: "user",
            foo: "Tours & Sightseeing,Water Sports",
        });
        expect(str).toEqual("filter[user][foo][equals]=Tours%20%26%20Sightseeing,Water%20Sports");
    });
    it("should build query URLs", function () {
        var query = jsonApiUtils_1.createFindByIdUrl("/foo", "1234", {
            include: ["containing-place"],
            nocache: true,
        });
        expect(query).toEqual("/foo?include=containing-place&nocache=true");
        query = jsonApiUtils_1.createFindByIdUrl("/foo", ["1234", "5678"], {
            resource: "foo",
            include: ["containing-place"],
        });
        expect(query).toEqual("/foo?include=containing-place&filter[foo][id][equals]=1234,5678&page[limit]=2");
    });
    it("should support extra query params", function () {
        var str = jsonApiUtils_1.createFilters({
            extras: {
                provider: "myprovider",
                someId: 1234,
            },
        });
        expect(str).toEqual("provider=myprovider&someId=1234");
    });
});
