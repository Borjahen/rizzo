"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var nock = require("nock");
var http_1 = require("../http");
var jsonApiError_1 = require("../jsonApiError");
describe("http", function () {
    it("should send json api content-type header", function () { return __awaiter(_this, void 0, void 0, function () {
        var mockReponse, fetchMock, client, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockReponse = { success: "true" };
                    fetchMock = nock("http://www.lp.com", {
                        reqheaders: {
                            "content-type": "application/vnd.api+json",
                        },
                    })
                        .get("/test")
                        .reply(200, mockReponse);
                    client = new http_1.default();
                    return [4 /*yield*/, client.fetch("http://www.lp.com/test")];
                case 1:
                    response = _a.sent();
                    fetchMock.done();
                    expect(response).toEqual(mockReponse);
                    return [2 /*return*/];
            }
        });
    }); });
    it("should send trace token", function () { return __awaiter(_this, void 0, void 0, function () {
        var mockReponse, fetchMock, client, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockReponse = { success: "true" };
                    fetchMock = nock("http://www.lp.com", {
                        reqheaders: {
                            "x-trace-token": function (value) { return !!value; },
                        },
                    })
                        .get("/test")
                        .reply(200, mockReponse);
                    client = new http_1.default();
                    return [4 /*yield*/, client.fetch("http://www.lp.com/test")];
                case 1:
                    response = _a.sent();
                    fetchMock.done();
                    expect(response).toEqual(mockReponse);
                    return [2 /*return*/];
            }
        });
    }); });
    it("should return void when status code is 204", function () { return __awaiter(_this, void 0, void 0, function () {
        var fetchMock, client, requestOptions, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fetchMock = nock("http://www.lp.com")
                        .post("/test")
                        .reply(204);
                    client = new http_1.default();
                    requestOptions = {
                        method: "post",
                    };
                    return [4 /*yield*/, client.fetch("http://www.lp.com/test", requestOptions)];
                case 1:
                    response = _a.sent();
                    fetchMock.done();
                    expect(response).toBeUndefined();
                    return [2 /*return*/];
            }
        });
    }); });
    it("should fail when status code is 3xx", function () { return __awaiter(_this, void 0, void 0, function () {
        var fetchMock, client, failed, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fetchMock = nock("http://www.lp.com")
                        .get("/test")
                        .reply(303);
                    client = new http_1.default();
                    failed = false;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, client.fetch("http://www.lp.com/test")];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    err_1 = _a.sent();
                    failed = true;
                    return [3 /*break*/, 4];
                case 4:
                    fetchMock.done();
                    expect(failed).toBeTruthy();
                    return [2 /*return*/];
            }
        });
    }); });
    it("should fail when status code is 4xx", function () { return __awaiter(_this, void 0, void 0, function () {
        var fetchMock, client, failed, err_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fetchMock = nock("http://www.lp.com")
                        .get("/test")
                        .reply(404);
                    client = new http_1.default();
                    failed = false;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, client.fetch("http://www.lp.com/test")];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    err_2 = _a.sent();
                    failed = true;
                    return [3 /*break*/, 4];
                case 4:
                    fetchMock.done();
                    expect(failed).toBeTruthy();
                    return [2 /*return*/];
            }
        });
    }); });
    it("should fail when status code is 5xx", function () { return __awaiter(_this, void 0, void 0, function () {
        var fetchMock, client, failed, err_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fetchMock = nock("http://www.lp.com")
                        .get("/test")
                        .reply(502);
                    client = new http_1.default();
                    failed = false;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, client.fetch("http://www.lp.com/test")];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    err_3 = _a.sent();
                    failed = true;
                    return [3 /*break*/, 4];
                case 4:
                    fetchMock.done();
                    expect(failed).toBeTruthy();
                    return [2 /*return*/];
            }
        });
    }); });
    it("should return body as text on DELETE requests", function () { return __awaiter(_this, void 0, void 0, function () {
        var mockResponse, fetchMock, client, requestOptions, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mockResponse = "string response";
                    fetchMock = nock("http://www.lp.com")
                        .delete("/test")
                        .reply(200, mockResponse);
                    client = new http_1.default();
                    requestOptions = {
                        method: "delete",
                    };
                    return [4 /*yield*/, client.fetch("http://www.lp.com/test", requestOptions)];
                case 1:
                    response = _a.sent();
                    fetchMock.done();
                    expect(response).toBe(mockResponse);
                    return [2 /*return*/];
            }
        });
    }); });
    it("should parse the first json api error on error response", function () { return __awaiter(_this, void 0, void 0, function () {
        var error, fetchMock, client, caughtError, err_4;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    error = {
                        id: "error-id",
                        status: "404",
                        code: "not_found",
                        title: "Not Found",
                        detail: "The requested bookmark list was not found",
                        source: {
                            pointer: "/data/id",
                        },
                    };
                    fetchMock = nock("http://www.lp.com")
                        .get("/test")
                        .reply(404, {
                        errors: [error, {
                                id: "second_error"
                            }]
                    });
                    client = new http_1.default();
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, client.fetch("http://www.lp.com/test")];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    err_4 = _a.sent();
                    caughtError = err_4;
                    return [3 /*break*/, 4];
                case 4:
                    fetchMock.done();
                    expect(caughtError).toBeDefined();
                    expect(caughtError).toBeInstanceOf(jsonApiError_1.default);
                    expect(caughtError.id).toBe(error.id);
                    expect(caughtError.status).toBe(error.status);
                    expect(caughtError.code).toBe(error.code);
                    expect(caughtError.title).toBe(error.title);
                    expect(caughtError.detail).toBe(error.detail);
                    expect(caughtError.source).toBeDefined();
                    expect(caughtError.source.pointer).toBe(error.source.pointer);
                    return [2 /*return*/];
            }
        });
    }); });
});
