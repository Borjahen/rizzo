"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var userService_1 = require("../resources/user/userService");
var userMapper_1 = require("../resources/user/userMapper");
describe("UserService", function () {
    it("should update properties", function () {
        var fetchMock = jest.fn(function () { return new Promise((function (resolve) { return resolve({
            data: {
                attributes: {
                    first_name: "boo"
                },
                id: 1,
                type: "user",
            },
        }); })); });
        var service = new userService_1.default("access123");
        service.mapper = new userMapper_1.default();
        service.http = {
            fetch: fetchMock,
        };
        service.update({
            id: "1",
            firstName: "Guy"
        })
            .catch(function (e) { return console.error(e); });
        expect(fetchMock).toHaveBeenCalledWith("/users/1", { "body": { "data": { "attributes": { "first_name": "Guy" }, "id": "1", "type": "user" } }, "headers": { "Authorization": "Bearer access123" }, "method": "PATCH" });
    });
    it("should authenticate", function () {
        var fetchMock = jest.fn(function () { return new Promise((function (resolve) { return resolve({
            sub: "1234",
        }); })); });
        var service = new userService_1.default("access123");
        service.mapper = new userMapper_1.default();
        service.http = {
            fetch: fetchMock,
        };
        service.findById = jest.fn();
        service.me()
            .catch(function (e) { return console.error(e); })
            .then(function () {
            expect(service.findById).toHaveBeenCalledWith("1234", {});
        });
    });
});
