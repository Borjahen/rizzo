"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var service_1 = require("../resources/bookmarkList/service");
describe("BookmarkListService", function () {
    it("should fetch a bookmark list", function () {
        var fetchMock = jest.fn(function () { return new Promise((function (resolve) { return resolve({
            data: {
                attributes: {
                    "entries_count": 1,
                    "name": "California Trip",
                    "source": "dotcom",
                    "visibility": "public"
                },
                id: "1",
                type: "bookmkark-list",
                relationships: {
                    entries: {
                        data: [{
                                id: "2",
                                type: "bookmark-entry"
                            }]
                    }
                }
            },
            included: [{
                    type: "bookmark-entry",
                    id: "2",
                    attributes: {
                        "checked": false,
                        "created_at": "2016-06-04T04:58:15.003Z",
                        "note": "Great wines recommended by my friend.",
                        "order_number": 3
                    },
                    relationships: {
                        target: {
                            data: {
                                id: "1234",
                                type: "poi"
                            }
                        }
                    }
                }]
        }); })); });
        var service = new service_1.default("access123");
        service.http = {
            fetch: fetchMock,
        };
        service.findByUserId("1")
            .then(function (list) {
            expect(list.entries.length).toBe(1);
        })
            .catch(function (e) { return console.error(e); });
        expect(fetchMock).toHaveBeenCalledWith("/users/1/bookmark-lists?include=entries,entries.target&nocache=true", { "headers": { "Authorization": "Bearer access123" } });
    });
    it("should fetch a bookmark list with an object as the entries relationship", function () {
        var fetchMock = jest.fn(function () { return new Promise((function (resolve) { return resolve({
            data: {
                attributes: {
                    "entries_count": 1,
                    "name": "California Trip",
                    "source": "dotcom",
                    "visibility": "public"
                },
                id: "1",
                type: "bookmkark-list",
                relationships: {
                    entries: {
                        data: {
                            id: "2",
                            type: "bookmark-entry"
                        }
                    }
                }
            },
            included: [{
                    type: "bookmark-entry",
                    id: "2",
                    attributes: {
                        "checked": false,
                        "created_at": "2016-06-04T04:58:15.003Z",
                        "note": "Great wines recommended by my friend.",
                        "order_number": 3
                    },
                    relationships: {
                        target: {
                            data: {
                                id: "1234",
                                type: "poi"
                            }
                        }
                    }
                }]
        }); })); });
        var service = new service_1.default("access123");
        service.http = {
            fetch: fetchMock,
        };
        service.findByUserId("1")
            .then(function (list) {
            expect(list.entries.length).toBe(1);
        })
            .catch(function (e) { return console.error(e); });
        expect(fetchMock).toHaveBeenCalledWith("/users/1/bookmark-lists?include=entries,entries.target&nocache=true", { "headers": { "Authorization": "Bearer access123" } });
    });
});
