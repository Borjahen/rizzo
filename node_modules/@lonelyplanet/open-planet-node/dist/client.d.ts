import { IOpenPlanetNode, IGetAccessTokenParams, IGetAccessTokenResponse } from "./interfaces";
import { IAvailabilityService } from "./resources/availability/service";
import { IUserService } from "./resources/user/userService";
import { IBookmarkListService } from "./resources/bookmarkList/service";
import { IBookmarkService } from "./resources/bookmark/bookmarkService";
import { IPlaceService } from "./resources/place/service";
import { IPartnerActivityService } from "./resources/partnerActivity/service";
import { IPoiService } from "./resources/poi/service";
import { ILodgingService } from "./resources/lodging/service";
import { ITagService } from "./resources/tag/service";
import { ISearchService } from "./resources/search/service";
import { IBlogPostService } from "./resources/blogPost/blogPostService";
import { IBlogCategoryService } from "./resources/blogCategory/blogCategoryService";
import { IBookmarkPopularityService } from "./resources/bookmarkPopularity/service";
import { IAssociationService } from "./resources/association/service";
import { IAssociationEntryService } from "./resources/associationEntry/service";
import { IVideoPlaylistService } from "./resources/videoPlaylist/service";
import { IVideoService } from "./resources/video/service";
import { IVideoSourceService } from "./resources/videoSource/service";
import { IBlacklistItemService } from "./resources/blacklistItem/service";
import { ITagAssociationService } from "./resources/tagAssociation/service";
import { IProductService } from "./resources/product/service";
export default class Client implements IOpenPlanetNode {
    clientId: string;
    private auth;
    availability: IAvailabilityService;
    user: IUserService;
    blogPost: IBlogPostService;
    blogCategory: IBlogCategoryService;
    bookmarkList: IBookmarkListService;
    bookmark: IBookmarkService;
    bookmarkPopularity: IBookmarkPopularityService;
    lodging: ILodgingService;
    poi: IPoiService;
    partnerActivity: IPartnerActivityService;
    place: IPlaceService;
    tag: ITagService;
    search: ISearchService;
    association: IAssociationService;
    associationEntry: IAssociationEntryService;
    video: IVideoService;
    videoSource: IVideoSourceService;
    videoPlaylist: IVideoPlaylistService;
    blacklistItem: IBlacklistItemService;
    tagAssociation: ITagAssociationService;
    product: IProductService;
    authorize(params: IGetAccessTokenParams): Promise<IGetAccessTokenResponse>;
    setAccessToken(accessToken: string): void;
}
