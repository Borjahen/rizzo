"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var authRequestBuilder_1 = require("./authRequestBuilder");
var TYPES = require("./types");
var Auth = /** @class */ (function () {
    function Auth(_a) {
        var clientId = _a.clientId, host = _a.host;
        this.clientId = clientId;
        this.host = host;
    }
    Auth.prototype.buildAccessTokenUrl = function (scope) {
        return new authRequestBuilder_1.default({
            host: this.host,
            options: {
                clientId: this.clientId,
                scope: scope,
                redirectUri: this.host.replace(/http:/, "https:") + "/sso",
            }
        })
            .getAccessTokenUrl();
    };
    Auth.prototype.getAccessToken = function (params) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.http.fetch(_this.buildAccessTokenUrl(params.scope), {
                headers: params.headers,
            })
                .then(function (response) {
                if (response.error) {
                    return reject(new Error(response.error_description));
                }
                resolve({
                    accessToken: response.access_token,
                });
            })
                .catch(function (e) { return reject(e); });
        });
    };
    __decorate([
        inversify_1.inject(TYPES.HttpClient),
        __metadata("design:type", Object)
    ], Auth.prototype, "http", void 0);
    Auth = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(TYPES.AuthParams)),
        __metadata("design:paramtypes", [Object])
    ], Auth);
    return Auth;
}());
exports.default = Auth;
