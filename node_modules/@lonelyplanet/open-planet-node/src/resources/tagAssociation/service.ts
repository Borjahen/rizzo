import { injectable } from "inversify";
import BaseService from "../../service";
import { IService, IResourceMapper, IFindParams } from "../../interfaces";
import TagAssociation, { ITagAssociation, ITagAssociationResource, ITagAssociationResponse } from "./";
import Mapper from "./mapper";

export interface ITagAssociationService extends IService<ITagAssociation> {}

@injectable()
export default class TagAssociationService extends BaseService<ITagAssociation, ITagAssociationResource> implements ITagAssociationService {
  resource: string = "tag-association";
  mapper: IResourceMapper<ITagAssociation, ITagAssociationResource> = new Mapper();

  public url() {
    return `${this.host}/tags/associations`;
  }

  public async findById(id: string, options: IFindParams = {}) {
    const response = await this.http.fetch<ITagAssociationResponse>(
      `${this.url()}/${id}${this.serializeQuery(options)}`,
      {
        headers: { ...this.headers(), "Accept-Version": "v2" },
    });

    return <TagAssociation>this.mapper.map(response);
  }

  public async find(options: IFindParams = {}) {
    const response = await this.http.fetch<ITagAssociationResponse>(
    `${this.url()}${this.serializeQuery(options)}`,
    {
      headers: { ...this.headers(), "Accept-Version": "v2" },
    });

    return <TagAssociation[]>this.mapper.map(response);
  }

  private serializeQuery(options: IFindParams): string {
    return this.qs({
      ...options,
      resource: "tag_association" // filters require underscored resource type
    });
  }
}
