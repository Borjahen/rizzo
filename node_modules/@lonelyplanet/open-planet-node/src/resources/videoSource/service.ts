import { injectable } from "inversify";
import BaseService from "../../service";
import { IService, IResourceMapper, IFindParams } from "../../interfaces";
import {
  IVideoSource, IVideoSourceResource, IVideoSourceResponse, videoSourceType
} from "./";
import Mapper from "./mapper";

export interface IVideoSourceService extends IService<IVideoSource> {
  findByVideoId(videoId: string, options: IFindParams): Promise<IVideoSource[]>
  findBySourceId(videoId: string, sourceId: string,  options: IFindParams): Promise<IVideoSource>
}

@injectable()
export default class VideoSourceService extends BaseService<IVideoSource, IVideoSourceResource> implements IVideoSourceService {
  resource: string = videoSourceType;
  mapper: IResourceMapper<IVideoSource, IVideoSourceResource> = new Mapper();

  public url(videoId) {
    return `${this.host}/videos/${videoId}/sources`;
  }

  public async findByVideoId(videoId: string, options: IFindParams = {}): Promise<IVideoSource[]> {
    const resources = await this.http.fetch<IVideoSourceResponse>(
      `${this.url(videoId)}/${this.qs(options)}`, {
        headers: this.headers(),
      }
    );

    return <IVideoSource[]>this.mapper.map(resources);
  }

  public async findBySourceId(videoId: string, sourceId: string,  options: IFindParams = {} ): Promise<IVideoSource> {
    const resources = await this.http.fetch<IVideoSourceResponse>(
      `${this.url(videoId)}/${sourceId}/${this.qs(options)}`, {
        headers: this.headers(),
      }
    );

    return <IVideoSource>this.mapper.map(resources);
  }
}
