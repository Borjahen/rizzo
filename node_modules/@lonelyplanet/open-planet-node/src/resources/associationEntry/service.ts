import { injectable } from "inversify";
import BaseService from "../../service";
import { IService, IResourceMapper, IFindParams } from "../../interfaces";
import AssociationEntry, { IAssociationEntry, IAssociationEntryResource, IAssociationEntryResponse } from "./";
import Mapper from "./mapper";

export interface IAssociationEntryService extends IService<IAssociationEntry> {
  bulkInsert(associationId: string, data: IAssociationEntry[]): Promise<AssociationEntry[]>
  findByEntryId(associationId: string, entryId: string, options: IFindParams): Promise<AssociationEntry>
  createAssociationEntry(associationId: string, entry: IAssociationEntry): Promise<AssociationEntry>
  updateAssociationEntry(associationId: string, entry: IAssociationEntry): Promise<void>
  deleteAssociationEntry(associationId: string, entryId: string): Promise<void>
}

@injectable()
export default class AssociationEntryService extends BaseService<IAssociationEntry, IAssociationEntryResource> implements IAssociationEntryService {
  resource: string = "association-entry";
  mapper: IResourceMapper<IAssociationEntry, IAssociationEntryResource> = new Mapper();

  public url(associationId) {
    return `${this.host}/associations/${associationId}/entries`;
  }

  public async findByEntryId(associationId: string, entryId: string, options: IFindParams = {}) {
    const resources = await this.http.fetch<IAssociationEntryResponse>(
      `${this.url(associationId)}/${entryId}${this.qs(options)}`, {
        headers: this.headers(),
      }
    );

    return <AssociationEntry>this.mapper.map(resources);
  }

  public async createAssociationEntry(associationId: string, entry: IAssociationEntry) {
    const response = await this.http.fetch<IAssociationEntryResponse>(`${this.url(associationId)}`, {
      method: "POST",
      body: {
        data: this.mapper.toResource(entry),
      },
      headers: this.headers(),
    });

    return <AssociationEntry>this.mapper.map(response);
  }

  public async updateAssociationEntry(associationId: string, entry: IAssociationEntry) {
    await this.http.fetch<IAssociationEntryResponse>(
      `${this.url(associationId)}/${entry.id}`,
      {
        method: "PATCH",
        body: {
          data: this.mapper.toResource(entry),
        },
        headers: this.headers(),
      }
    );

    return;
  }

  public async bulkInsert(associationId: string, data: IAssociationEntry[]) {
    const response = await this.http.fetch<IAssociationEntryResponse>(`${this.url(associationId)}`, {
      method: "PUT",
      body: {
        data: data.map(this.mapper.toResource),
      },
      headers: this.headers(),
    });

    return <AssociationEntry[]>this.mapper.map(response);
  }

  public async deleteAssociationEntry(associationId: string, entryId: string) {
    await this.http.fetch(`${this.url(associationId)}/${entryId}`, {
      method: "DELETE",
      body: {
        data: {},
      },
      headers: this.headers(),
    });

    return;
  }
}
