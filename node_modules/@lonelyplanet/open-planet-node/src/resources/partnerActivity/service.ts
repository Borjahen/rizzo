import { injectable } from "inversify";
import BaseService from "../../service";
import { IService, IResourceMapper, IFindParams } from "../../interfaces";
import { IPartnerActivity, IPartnerActivityResource, IPartnerActivityResponse, partnerActivityType } from "./";
import Mapper from "./mapper";

export interface IPartnerActivityService extends IService<IPartnerActivity> {
  findByPoiId(poiId: string, options: IFindParams): Promise<IPartnerActivity[]>;
  findByLodgingId(lodgingId: string, options: IFindParams): Promise<IPartnerActivity[]>;
}

@injectable()
export default class PartnerActivityService extends BaseService<IPartnerActivity, IPartnerActivityResource> implements IPartnerActivityService {
  resource: string = partnerActivityType;
  mapper: IResourceMapper<IPartnerActivity, IPartnerActivityResource> = new Mapper();

  public url() {
    return `${this.host}/partner-activities`;
  }

  public async findByPoiId(poiId: string, options: IFindParams = {}): Promise<IPartnerActivity[]> {
    return this.findByResourceId("pois", poiId, options);
  }

  public async findByLodgingId(lodgingId: string, options: IFindParams = {}): Promise<IPartnerActivity[]> {
    return this.findByResourceId("lodgings", lodgingId, options);
  }

  private async findByResourceId(collection: string, id: string, options: IFindParams): Promise<IPartnerActivity[]> {
    const url = `${this.host}/${collection}/${id}/partner-activities${this.qs(options)}`;
    const response = await this.http.fetch<IPartnerActivityResponse>(url, {
      method: "GET",
      headers: this.headers(),
    });

    return <IPartnerActivity[]>this.mapper.map(response);
  }
}
