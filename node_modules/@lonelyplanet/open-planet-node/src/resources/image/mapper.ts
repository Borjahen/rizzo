import { inject, injectable } from "inversify";
import Poi, { poiType, IPoi, IPoiResource, IPoiAttributes } from "../poi";
import { IJsonApiResource } from "../../interfaces";
import Mapper from "../../mapper";
import * as TYPES from "../../types";
import { imageAssociationType, imageType, IImage, IImageAttributes } from "./";

@injectable()
export class PoiMapper extends Mapper<IPoi, IPoiResource> {
  @inject(TYPES.Bookmark) model: IPoi;

  toModel(resource: IPoiResource, included: IJsonApiResource[] = []): IPoi {
    const model = new Poi();
    const attrs = resource.attributes;

    model.id = resource.id;
    model.address = attrs.address;
    model.emails = attrs.emails;
    model.hours = attrs.hours_string;
    model.location = attrs.location;
    model.name = attrs.name;
    model.poiAttributes = attrs.poi_attributes;
    model.poiType = attrs.poi_type;
    model.price = attrs.price_string;
    model.publishedAt = attrs.published_at;
    model.priceRange = attrs.price_range;
    model.review = attrs.review;
    model.richHoursString = attrs.rich_hours_string;
    model.lpInternalScore = attrs.score;
    model.searchableName = attrs.searchable_name;
    model.subtypes = attrs.subtypes;
    model.telephone = attrs.telephone;
    model.telephoneInfo = attrs.telephone_info;
    model.website = attrs.website;
    model.containingPlaceId = (<IJsonApiResource>resource.relationships["containing-place"].data).id;
    model.type = resource.type;

    const place = included.find((resource) => resource.id === model.containingPlaceId);
    if (place) {
      model.containingPlaceName = (<{ [key: string]: string}>place.attributes).name;
    }

    const associations = included.filter((resource) =>
        resource.type === imageAssociationType &&
        model.id === (<IJsonApiResource>resource.relationships.to.data).id
      )
      .map((a) => (<IJsonApiResource>a.relationships.from.data).id);

    if (associations) {
      const images = included.filter((resource) =>
        resource.type === imageType &&
        associations.indexOf(resource.id) > -1,
      );
      model.images = images.map((image: IJsonApiResource<IImageAttributes>): IImage => ({
        attribution: image.attributes.attribution,
        path: image.attributes.path,
        caption: image.attributes.caption,
        height: image.attributes.height,
        width: image.attributes.width,
        orientation: image.attributes.orientation,
        tags: image.attributes.tags || [],
        url: image.links.pixels,
      }));
    }

    return model;
  }

  toResource(model: IPoi): IPoiResource {
    const resource = {
      id: model.id,
      type: poiType,
      attributes: {
        address: model.address,
        emails: model.emails,
        hours_string: model.hours,
        location: model.location,
        name: model.name,
        poi_attributes: model.poiAttributes,
        poi_type: model.poiType,
        price_range: model.priceRange,
        price_string: model.price,
        published_at: model.publishedAt,
        review: model.review,
        rich_hours_string: model.richHoursString,
        score: model.lpInternalScore,
        searchable_name: model.searchableName,
        subtypes: model.subtypes,
        telephone: model.telephone,
        telephone_info: model.telephoneInfo,
        website: model.website,
      },
    };

    return resource;
  }
}

export default PoiMapper;
