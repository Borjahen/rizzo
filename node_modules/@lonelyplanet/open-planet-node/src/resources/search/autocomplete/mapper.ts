import { inject, injectable } from "inversify";
import { ISearchResource } from "../";
import Autocomplete, { IAutocomplete } from "./";
import { IJsonApiResource } from "../../../interfaces";
import Mapper from "../../../mapper";
import * as TYPES from "../../../types";

@injectable()
export class AutocompleteMapper extends Mapper<IAutocomplete, ISearchResource> {
  @inject(TYPES.Bookmark) model: IAutocomplete;

  toModel(resource: ISearchResource, included: IJsonApiResource[] = []): IAutocomplete {
    const model = new Autocomplete();
    const attrs = resource.attributes;

    model.id = resource.id;
    model.swiftypeId = resource["swiftype-id"];
    model.url = attrs.url;
    model.title = attrs.title;
    model.opId = attrs["op-id"];
    model.opType = attrs["op-type"];
    model.highlights = attrs.highlights;
    model.parentName = attrs["parent-name"];
    model.placeType = attrs["place-type"];
    model.poiSubtypes = attrs["poi-subtypes"];
    model.thumbnail = attrs.thumbnail;

    return model;
  }

  toResource(model: IAutocomplete) {
    return null;
  }
}

export default AutocompleteMapper;
