import { injectable } from "inversify";
import Base from "../../base";
import { IBase, IResourceMapper, IJsonApiResponse, ISearchParams, IAutocompleteParams } from "../../interfaces";
import { ISearch, ISearchResource, searchType, ISearchResultsPayload } from "./";
import { IAutocomplete, IAutocompletePayload } from "./autocomplete";
import Mapper from "./mapper";
import AutocompleteMapper from "./autocomplete/mapper";

export interface ISearchService extends IBase<ISearch> {
  query(options: ISearchParams): Promise<ISearchResultsPayload>;
  createClickthrough(term: string, searchResultId: string): Promise<void>;
  createAutocompleteClickthrough(prefix: string, searchResultSwiftypeId: string): Promise<void>;
  queryAutocomplete(options: ISearchParams): Promise<IAutocompletePayload>;
}

@injectable()
export default class SearchService extends Base<ISearch, ISearchResource> implements ISearchService {
  resource: string = searchType;
  mapper: IResourceMapper<ISearch, ISearchResource> = new Mapper();

  public url() {
    return `${this.host}/search`;
  }

  public async query(options: ISearchParams): Promise<ISearchResultsPayload> {
    const response = await this.http.fetch<IJsonApiResponse<ISearchResource>>(
      `${this.url()}${this.qs(options)}`,
      {
        ...options,
        headers: this.headers(),
      });

    const parsed = <ISearch[]>this.parse(response);

    return {
      data: parsed,
      meta: {
        query: response.meta.query as string,
        total: response.meta.total as number,
      },
      total: response.meta.total as number,
    };
  }

  public async createClickthrough(term, searchResultId) {
    await this.http.fetch(`${this.url()}/clickthroughs`, {
      method: "POST",
      body: {
        data: {
          attributes: { term: term, id: searchResultId },
          type: 'search-clickthrough',
        }
      },
      headers: this.headers(),
    });
  }

  public async createAutocompleteClickthrough(prefix, searchResultSwiftypeId) {
    await this.http.fetch(`${this.url()}/autocomplete/clickthroughs`, {
      method: "POST",
      body: {
        data: {
          attributes: { prefix: prefix, id: searchResultSwiftypeId },
          type: 'autocomplete-clickthrough',
        }
      },
      headers: this.headers(),
    });
  }

  public async queryAutocomplete(options: IAutocompleteParams): Promise<IAutocompletePayload> {
    const url = `${this.url()}/autocomplete${this.qs(options)}`;
    const response = await this.http.fetch<IJsonApiResponse<ISearchResource>>(url, {
      headers: this.headers(),
      ...options
    });

    const mapper: IResourceMapper<IAutocomplete, ISearchResource> = new AutocompleteMapper();

    return {
      meta: {
        query: response.meta.query as string,
        total: response.meta.total as number,
      },
      data: <IAutocomplete[]>mapper.map(response)
    }
  }
}
