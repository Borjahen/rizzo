import { inject, injectable } from "inversify";
import BaseService from "../../service";
import { IHttpClient, IService, IResourceMapper, IOpenIdUserInfoResponse, IFindParams } from "../../interfaces";
import User, { IUser, IUserResource } from "../user";
import * as TYPES from "../../types";

export interface IUserService extends IService<IUser> {
  me(options?: IFindParams): Promise<IUser>;
}

@injectable()
export default class UserService extends BaseService<IUser, IUserResource> implements IUserService {
  public resource: string = "user";
  @inject("UserResourceMapper") public mapper: IResourceMapper<IUser, IUserResource>;

  public url() {
    return `${this.host}/users`;
  }

  public async me(options: IFindParams = {}): Promise<IUser> {
    const userInfo = await this.http.fetch<IOpenIdUserInfoResponse>(
      `${process.env.OPENID_HOST}/userinfo`, {
        ...options,
        headers: this.headers(),
      }
    );

    const me = await this.findById(userInfo.sub, options);
    return <IUser>me;
  }
}
