"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var config_json_1 = __importDefault(require("./config.json"));
var tracker_1 = require("./tracker");
var defaultAnalyticsPath = config_json_1.default.analyticsPath;
exports.getAnalyticsObject = function (path) {
    return path.replace("window.", "").split(".").filter(function (item) { return !!item; })
        .reduce(function (acc, key) { return acc[key] || (acc[key] = {}); }, window);
};
var makeTrackMethod = function (path) {
    var tracker = tracker_1.makeTracker(path);
    // .bind is cleaner, but this allows us to test that the prototype method was called.
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return tracker.track.apply(tracker, args);
    };
};
exports.getDataLayer = function (path) {
    if (path === void 0) { path = defaultAnalyticsPath; }
    var gtmDataLayerName = config_json_1.default.providers.googleTagManager.gtmDataLayerName;
    var analytics = exports.getAnalyticsObject(path);
    analytics.dataLayer = analytics.dataLayer || (analytics.dataLayer = []);
    var gtmDataLayerReference = window[gtmDataLayerName];
    var rizzoWorkaround = !Array.isArray(analytics.dataLayer);
    /**
     * in a Rizzo-based codebase, analytics.dataLayer will be an object.
     * If we aliased that object to `window[gtmDataLayerName]`,
     * gtm.js would retrieve that object instead of get-or-creating an array. And we'd have nowhere to push events to.
     * So don't alias in that case. Still need to make sure we at least set gtmDataLayerReference as an empty array
     * if nothing there yet, so that we have somewhere to push `dataLayer-initialized` to (before loading gtm.js snippet).
     */
    if (rizzoWorkaround) {
        gtmDataLayerReference = gtmDataLayerReference || (window[gtmDataLayerName] = []);
    }
    else {
        var alreadyAliased = gtmDataLayerReference === analytics.dataLayer;
        gtmDataLayerReference =
            alreadyAliased ? gtmDataLayerReference : (window[gtmDataLayerName] = analytics.dataLayer);
    }
    return gtmDataLayerReference;
};
exports.getTrackMethod = function (path) {
    if (path === void 0) { path = defaultAnalyticsPath; }
    var analytics = exports.getAnalyticsObject(path);
    analytics.track = analytics.track || (analytics.track = makeTrackMethod(path));
    return analytics.track;
};
