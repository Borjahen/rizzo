"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var config_json_1 = __importDefault(require("../config.json"));
var dataLayer_1 = require("../dataLayer");
var providers_1 = require("../tracker/providers");
__export(require("./providers"));
var defaultAnalyticsPath = config_json_1.default.analyticsPath;
exports.makeTracker = function (analyticsPath) {
    if (analyticsPath === void 0) { analyticsPath = defaultAnalyticsPath; }
    /**
     * The canonical tracker instance that will (given proper implementation)
     * define tracking behavior across all apps.
     */
    return new Tracker([new providers_1.GoogleTagManagerProvider()], analyticsPath);
};
var Tracker = /** @class */ (function () {
    function Tracker(providers, analyticsPath) {
        if (analyticsPath === void 0) { analyticsPath = defaultAnalyticsPath; }
        this.analyticsPath = analyticsPath;
        this.providers = providers;
    }
    Tracker.prototype.initializeContainers = function () {
        this.providers.forEach(function (provider) { return provider.init(); });
    };
    Tracker.prototype.track = function (event) {
        /**
         * Have to wait until "track" is actually called to retrieve dataLayer,
         * so that we don't try to do so when Tracker is instantiated on the server
         * (when there is no window object).
         */
        var dataLayer = dataLayer_1.getDataLayer(this.analyticsPath);
        this.providers.forEach(function (provider) { return provider.handleEvent({
            dataLayer: dataLayer,
            event: event,
        }); });
    };
    Object.defineProperty(Tracker.prototype, "snippet", {
        get: function () {
            return this.providers.map(function (provider) { return provider.snippet; }).join("\r\n");
        },
        enumerable: true,
        configurable: true
    });
    return Tracker;
}());
exports.Tracker = Tracker;
