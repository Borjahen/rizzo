"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var config_json_1 = __importDefault(require("../../../config.json"));
var testEvents_1 = require("../../../events/testEvents");
var providers_1 = require("../../../tracker/providers");
var gtmDataLayerName = config_json_1.default.providers.googleTagManager.gtmDataLayerName;
describe("GoogleTagManager tracking provider instance", function () {
    var instance = new providers_1.GoogleTagManagerProvider({ containerId: "testContainerId" });
    beforeEach(function () {
        delete window[gtmDataLayerName];
    });
    describe("snippet method", function () {
        it("should have a snippet method providing Google's snippet code as a string", function () {
            var snippet = instance.snippet;
            expect(typeof snippet).toBe("string");
            expect(snippet).not.toContain("<script>");
            expect(snippet).toContain("function(w,d,s,l,i)");
            expect(snippet).toContain("testContainerId");
        });
    });
    describe("init method", function () {
        it("should implements Google's snippet code", function () {
            // GTM's snippet code looks for any script tag in the DOM to use as a reference; need at least one.
            var arbitraryScriptTag = document.createElement("script");
            document.body.appendChild(arbitraryScriptTag);
            instance.init();
            // GTM will attach a "gtm.start" event to window.dataLayer, even though we use a different dataLayer location.
            expect(Array.isArray(window.dataLayer)).toBe(true);
            var gtmStartEvent = window.dataLayer[0];
            var event = gtmStartEvent.event;
            expect(event).toBe("gtm.js");
            expect(typeof gtmStartEvent["gtm.start"]).toBe("number");
            /**
             * It will also attach an async script tag for "gtm.js", specifying our container ID,
             * above the first script tag on the page.
             */
            var firstScriptTag = document.getElementsByTagName("script")[0];
            var src = firstScriptTag.src, isAsync = firstScriptTag.async;
            expect(src).toContain("googletagmanager.com/gtm.js");
            expect(src).toContain("?id=testContainerId");
            expect(isAsync).toBe(true);
        });
        it("should attach a script tag without data layer name query string param if data layer name not provided", function () {
            instance.init();
            var firstScriptTag = document.getElementsByTagName("script")[0];
            var src = firstScriptTag.src;
            expect(src).not.toContain("&l=");
        });
        it("should attach the query string param if data layer name provided, however.", function () {
            var differentInstance = new providers_1.GoogleTagManagerProvider({ gtmDataLayerName: "somethingElse" });
            differentInstance.init();
            var firstScriptTag = document.getElementsByTagName("script")[0];
            var src = firstScriptTag.src;
            expect(src).toContain("&l=somethingElse");
        });
    });
    describe("handleEvent method", function () {
        it("should push events to the data layer", function () {
            var dataLayer = [];
            instance.handleEvent({
                dataLayer: dataLayer,
                event: testEvents_1.dataLayerInit,
            });
            expect(dataLayer.length).toBe(1);
            var pushedEvent = dataLayer[0];
            expect(pushedEvent).toEqual(testEvents_1.dataLayerInit);
            instance.handleEvent({
                dataLayer: dataLayer,
                event: testEvents_1.dataLayerInit,
            });
            expect(dataLayer.length).toBe(2);
        });
        it("should use the patched version of Array.prototype.push after gtm.js patches it, " +
            "instead of retaining a reference to the data layer's native, un-patched Array.prototype.push", function () {
            var dataLayer = [];
            expect(dataLayer.push).toBe(Array.prototype.push);
            var gtmPatchedPush = jest.fn();
            dataLayer.push = gtmPatchedPush;
            instance.handleEvent({
                dataLayer: dataLayer,
                event: testEvents_1.dataLayerInit,
            });
            expect(gtmPatchedPush).toHaveBeenCalled();
        });
    });
});
