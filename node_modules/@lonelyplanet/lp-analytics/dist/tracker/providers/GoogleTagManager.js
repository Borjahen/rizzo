"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var config_json_1 = __importDefault(require("../../config.json"));
var settings = config_json_1.default.providers.googleTagManager;
var defaultContainerId = settings.containerId, defaultDataLayerName = settings.gtmDataLayerName;
var GoogleTagManagerProvider = /** @class */ (function () {
    function GoogleTagManagerProvider(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.containerId, containerId = _c === void 0 ? defaultContainerId : _c, _d = _b.gtmDataLayerName, gtmDataLayerName = _d === void 0 ? defaultDataLayerName : _d;
        this.containerId = containerId;
        this.gtmDataLayerName = gtmDataLayerName;
    }
    Object.defineProperty(GoogleTagManagerProvider.prototype, "snippet", {
        get: function () {
            return "(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n    'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n    })(window,document,'script','" + this.gtmDataLayerName + "','" + this.containerId + "');";
        },
        enumerable: true,
        configurable: true
    });
    GoogleTagManagerProvider.prototype.init = function () {
        // This is the same code as "snippet" above, in readable, non-string format.
        var _a = this, gtmDataLayerName = _a.gtmDataLayerName, containerId = _a.containerId;
        window[gtmDataLayerName] = window[gtmDataLayerName] || [];
        window[gtmDataLayerName].push({ "gtm.start": new Date().getTime(), event: "gtm.js" });
        var firstScriptTag = document.getElementsByTagName("script")[0];
        var gtmScriptTag = document.createElement("script");
        /**
         * The query param informs `gtm.js` (which is being dynamically generated)
         * where to get or create a dataLayer array. It always checks directly on the window object,
         * at window[gtmDataLayerName]. If gtmDataLayerName is "dataLayer" (which is the default
         * and I can't imagine us using anything else), no query param is needed.
         * Typically we alias "window.lp.analytics.dataLayer" to window[gtmDataLayerName] **prior to this code running**
         * such that `gtm.js` will retrieve & use it instead of creating a new array.
         * This aliasing is done as part of "initializeDataLayer" (if you're using the script tag) or
         * any of the React tooling (anytime "getDataLayer" is called, which is often).
         */
        var gtmDataLayerNameQueryStringParam = gtmDataLayerName === "dataLayer" ? "" : "&l=" + gtmDataLayerName;
        gtmScriptTag.async = true;
        gtmScriptTag.src = "https://www.googletagmanager.com/gtm.js?id=" + containerId + gtmDataLayerNameQueryStringParam;
        firstScriptTag.parentNode.insertBefore(gtmScriptTag, firstScriptTag);
    };
    GoogleTagManagerProvider.prototype.handleEvent = function (_a) {
        var dataLayer = _a.dataLayer, event = _a.event;
        if (typeof dataLayer.push === "function") {
            dataLayer.push(event);
        }
    };
    return GoogleTagManagerProvider;
}());
exports.GoogleTagManagerProvider = GoogleTagManagerProvider;
