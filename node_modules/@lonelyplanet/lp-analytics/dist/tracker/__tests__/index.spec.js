"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tracker_1 = require("../../tracker");
var dataLayer_1 = require("../../dataLayer");
var testEvents_1 = require("../../events/testEvents");
var providers_1 = require("../../tracker/providers");
describe("Tracker class", function () {
    describe("initializeContainers method", function () {
        it("should call GoogleTagManager's init method (when so configured)", function () {
            var gtm = new providers_1.GoogleTagManagerProvider();
            var tracker = new tracker_1.Tracker([gtm]);
            var spy = jest.spyOn(gtm, "init").mockImplementationOnce((function () { return null; }));
            tracker.initializeContainers();
            expect(spy).toHaveBeenCalled();
        });
    });
    describe("snippet method", function () {
        it("should produce output containing GoogleTagManager's snippet code (when so configured)", function () {
            var gtm = new providers_1.GoogleTagManagerProvider();
            var tracker = new tracker_1.Tracker([gtm]);
            expect(tracker.snippet).toContain(gtm.snippet);
        });
    });
    describe("track method", function () {
        it("should call GoogleTagManager's handleEvent method with dataLayer & event (when so configured)", function () {
            var gtm = new providers_1.GoogleTagManagerProvider();
            var tracker = new tracker_1.Tracker([gtm]);
            var spy = jest.spyOn(gtm, "handleEvent").mockImplementationOnce(function (args) { return args; });
            tracker.track(testEvents_1.dataLayerInit);
            expect(spy).toHaveBeenCalledWith({
                dataLayer: dataLayer_1.getDataLayer(),
                event: testEvents_1.dataLayerInit,
            });
        });
        it("should retrieve the dataLayer array when 'track' is called, instead of attempting to retain " +
            "a reference to it, which would lead to problems with GTM's Array.prototype.push " +
            "patching and React server-side rendering", function () {
            var gtm = new providers_1.GoogleTagManagerProvider();
            var tracker = new tracker_1.Tracker([gtm], "window");
            tracker.track(testEvents_1.dataLayerInit);
            var oldDataLayer = window.dataLayer;
            expect(oldDataLayer.length).toBe(1);
            var newDataLayer = [];
            window.dataLayer = newDataLayer;
            tracker.track(testEvents_1.dataLayerInit);
            /**
             * it pushed to the new dataLayer that we swapped in, instead of hanging on to the old one.
             * so length is one instead of two.
             */
            expect(newDataLayer).not.toBe(oldDataLayer);
            expect(newDataLayer.length).toBe(1);
        });
    });
});
