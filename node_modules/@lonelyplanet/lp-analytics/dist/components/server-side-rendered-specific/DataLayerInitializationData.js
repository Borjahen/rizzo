"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_side_effect_1 = __importDefault(require("react-side-effect"));
var createDataLayerScript_1 = require("./createDataLayerScript");
var dataLayerInitPayloadIndex = 0;
var scriptWrapper = function (content) { return content; };
exports.mapStateOnServer = function (state) { return createDataLayerScript_1.createDataLayerScript(state, dataLayerInitPayloadIndex, scriptWrapper); };
exports.reducePropsToState = function (propsList) {
    return propsList.reduce(function (acc, instanceProps) {
        var data = instanceProps.data, indexForEntirePayload = instanceProps.indexForEntirePayload, scriptWrapperForEntirePayload = instanceProps.scriptWrapperForEntirePayload;
        if (indexForEntirePayload !== undefined) {
            dataLayerInitPayloadIndex = indexForEntirePayload;
        }
        if (scriptWrapperForEntirePayload !== undefined) {
            scriptWrapper = scriptWrapperForEntirePayload;
        }
        return __assign({}, acc, data || {});
    }, createDataLayerScript_1.emptyDataLayerInitializationEvent);
};
/**
 * Returning null here is ok; this doesn't need to return anything, just execute a side effect.
 * But we want _nothing_ to happen here upon state changes on the client.
 * This component will create an aggregated dataLayer-init event payload on the server.
 * If we make changes to it on the client, it could create a race condition between those changes and
 * the execution of the gtm.js script that <TrackingContainersInitializer> will download, ie, it's
 * possible that those changes to the dataLayer-init payload wouldn't have occurred by the time gtm.js runs.
 * (It's probably OK since gtm.js needs to download and is an async tag, but it'd be hard to debug
 * if it did occur, and since it isn't necessary anyway, let's make it easier to reason about).
 */
exports.handleStateChangeOnClient = function () { return null; };
exports.DataLayerInitializationData = react_side_effect_1.default(exports.reducePropsToState, exports.handleStateChangeOnClient, exports.mapStateOnServer)(function () { return null; });
