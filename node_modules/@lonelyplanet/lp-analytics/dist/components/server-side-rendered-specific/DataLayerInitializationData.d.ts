/// <reference types="react-side-effect" />
import * as React from "react";
export interface IDataLayerProps {
    data?: object;
    indexForEntirePayload?: number;
    scriptWrapperForEntirePayload?: (content: string) => string;
}
export declare const mapStateOnServer: (state: any) => any;
export declare const reducePropsToState: (propsList: IDataLayerProps[]) => import("../../events/interfaces").IDataLayerInitEvent;
/**
 * Returning null here is ok; this doesn't need to return anything, just execute a side effect.
 * But we want _nothing_ to happen here upon state changes on the client.
 * This component will create an aggregated dataLayer-init event payload on the server.
 * If we make changes to it on the client, it could create a race condition between those changes and
 * the execution of the gtm.js script that <TrackingContainersInitializer> will download, ie, it's
 * possible that those changes to the dataLayer-init payload wouldn't have occurred by the time gtm.js runs.
 * (It's probably OK since gtm.js needs to download and is an async tag, but it'd be hard to debug
 * if it did occur, and since it isn't necessary anyway, let's make it easier to reason about).
 */
export declare const handleStateChangeOnClient: () => any;
export declare const DataLayerInitializationData: (React.ComponentClass<IDataLayerProps, any> & {
    peek: () => any;
    rewind: () => any;
}) | (React.StatelessComponent<IDataLayerProps> & {
    peek: () => any;
    rewind: () => any;
});
