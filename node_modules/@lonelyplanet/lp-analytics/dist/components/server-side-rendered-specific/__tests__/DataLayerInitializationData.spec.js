"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var enzyme_1 = require("enzyme");
var values_1 = __importDefault(require("core-js/fn/object/values"));
var config_json_1 = __importDefault(require("../../../config.json"));
var dataLayer_1 = require("../../../dataLayer");
var testEvents_1 = require("../../../events/testEvents");
var events_1 = require("../../../events");
var DataLayerInitializationData_1 = require("../DataLayerInitializationData");
var createDataLayerScript_1 = require("../createDataLayerScript");
describe("<DataLayerInitializationData />", function () {
    beforeEach(function () {
        delete window.lp;
        delete window.GLOBAL_UI_INITIAL_PROPS;
    });
    test("absent other data, it should provide all requisite keys initialized " +
        "to undefined or false and with the event name set correctly.", function () {
        enzyme_1.shallow(React.createElement(DataLayerInitializationData_1.DataLayerInitializationData, null));
        var data = DataLayerInitializationData_1.DataLayerInitializationData.peek();
        expect(new Set(Object.keys(data))).toEqual(new Set(Object.keys(testEvents_1.dataLayerInit)));
        var _a = events_1.analytics.eventName, isAlreadySetButTheRestAre = data[_a], blanks = __rest(data, [typeof _a === "symbol" ? _a : _a + ""]);
        /** Obvious use-case for Object.values below, but opting to not use code requiring polyfills since
         * this is a library, we don't know the webpack setup of the target codebase,
         * and we don't want to pollute the global namespace.
         * This is a test so it'd be fine regardless if we limited use to here, but
         * we're still beholden to "compilerOptions.lib" in "tsconfig.json".
         * But, we can import directly from "core-js": https://www.npmjs.com/package/core-js.
         * NOTE: we use webpack here only for files in /scripts
         * in order to produce usable script tags for (possibly es5) codebases without webpack;
         * could have a distinct setup there, but let's only import & use core-js directly in order to be consistent.
         */
        expect(values_1.default(blanks).every(function (value) { return value === false || value === undefined; })).toEqual(true);
    });
    it("should combine all calls into one object", function () {
        var state = DataLayerInitializationData_1.reducePropsToState([{
                data: {
                    cd1: "foo"
                },
            }, {
                data: {
                    cd2: "bar",
                }
            }]);
        expect(state).toHaveProperty("cd1");
        expect(state).toHaveProperty("cd2");
    });
    it("should do the same when 'indexForEntirePayload' prop is passed to DataLayerInitializationData component", function () {
        enzyme_1.shallow(React.createElement(DataLayerInitializationData_1.DataLayerInitializationData, { indexForEntirePayload: 1 }));
        // make sure it indeed sets it for entire payload, regardless of subsequent un-opinionated instances.
        enzyme_1.shallow(React.createElement(DataLayerInitializationData_1.DataLayerInitializationData, null));
        var data = DataLayerInitializationData_1.DataLayerInitializationData.peek();
        var script = DataLayerInitializationData_1.mapStateOnServer(data);
        eval(script); // tslint:disable-line:no-eval
        var analyticsPath = config_json_1.default.analyticsPath;
        var _a = dataLayer_1.getAnalyticsObject(analyticsPath).dataLayer, firstItem = _a[0], secondItem = _a[1];
        expect(firstItem).toBe(undefined);
        expect(secondItem).toEqual(__assign({}, createDataLayerScript_1.emptyDataLayerInitializationEvent));
    });
    it("should insert the appropriate values when they are provided", function () {
        /**
         * evidently react-side-effect refuses to let you call .rewind in a (simulated) browser
         * environment, and that's the only way I know of to reset its internal state.
         * So since this impacts its state, moving this test below the others.
         */
        enzyme_1.shallow(React.createElement(DataLayerInitializationData_1.DataLayerInitializationData, { data: {
                siteSection: "about-us",
            } }));
        var data = DataLayerInitializationData_1.DataLayerInitializationData.peek();
        expect(data.siteSection).toBe("about-us");
    });
});
