"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var enzyme_1 = require("enzyme");
var providers_1 = require("../../tracker/providers");
var components_1 = require("../../components");
describe("TrackingContainersInit component", function () {
    it("should render a script tag.", function () {
        var wrapper = enzyme_1.shallow(React.createElement(components_1.TrackingContainersInitializer, null));
        expect(wrapper.find("script").length).toBe(1);
    });
    it("the script tag should contain provider snippet code.", function () {
        var wrapper = enzyme_1.shallow(React.createElement(components_1.TrackingContainersInitializer, null));
        var gtm = new providers_1.GoogleTagManagerProvider();
        expect(wrapper.find("script").html()).toContain(gtm.snippet);
    });
    it("should accept a 'helmet' boolean that will render it using 'react-helmet'", function () {
        var wrapper = enzyme_1.shallow(React.createElement(components_1.TrackingContainersInitializer, { helmet: true }));
        var gtm = new providers_1.GoogleTagManagerProvider();
        expect(wrapper.find("HelmetWrapper").length).toBe(1);
        var first = wrapper.find("HelmetWrapper").prop("script")[0];
        var innerHTML = first.innerHTML;
        expect(innerHTML).toContain(gtm.snippet);
    });
});
