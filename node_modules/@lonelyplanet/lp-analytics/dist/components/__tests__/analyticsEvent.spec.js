"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var enzyme_1 = require("enzyme");
var AnalyticsEvent_1 = require("../../components/AnalyticsEvent");
var testEvents_1 = require("../../events/testEvents");
var tracker_1 = require("../../tracker");
describe("AnalyticsEvent component", function () {
    it("it renders child content as it's supposed to", function () {
        var wrapper = enzyme_1.mount(React.createElement(AnalyticsEvent_1.AnalyticsEvent, { render: function () { return (React.createElement("div", { className: "some-content" })); } }));
        expect(wrapper.find(".some-content").length).toBe(1);
    });
    it("Should call Tracker.prototype.track when track is called.", function () {
        var spy = jest.spyOn(tracker_1.Tracker.prototype, "track").mockImplementationOnce(function () { return null; });
        var wrapper = enzyme_1.mount(React.createElement(AnalyticsEvent_1.AnalyticsEvent, { render: function (_a) {
                var track = _a.track;
                return (React.createElement("div", { className: "some-content", onClick: function () { return track(testEvents_1.dataLayerInit); } }));
            } }));
        wrapper.find(".some-content").first().simulate("click");
        expect(spy).toHaveBeenCalledWith(testEvents_1.dataLayerInit);
    });
    it("Should properly propagate changes to rendered components.", function () { return __awaiter(_this, void 0, void 0, function () {
        var ReallyBasicChild, ReallyBasicParent, wrapper;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    ReallyBasicChild = function (_a) {
                        var textContent = _a.textContent;
                        return React.createElement("h1", { className: "child" }, textContent);
                    };
                    ReallyBasicParent = /** @class */ (function (_super) {
                        __extends(ReallyBasicParent, _super);
                        function ReallyBasicParent(props) {
                            var _this = _super.call(this, props) || this;
                            _this.state = { textContent: "unchanged" };
                            return _this;
                        }
                        ReallyBasicParent.prototype.render = function () {
                            var textContent = this.state.textContent;
                            return React.createElement("div", { className: "parent" },
                                React.createElement(AnalyticsEvent_1.AnalyticsEvent, { render: function () { return (React.createElement(ReallyBasicChild, { textContent: textContent })); } }),
                                ";");
                        };
                        return ReallyBasicParent;
                    }(React.Component));
                    wrapper = enzyme_1.mount(React.createElement(ReallyBasicParent, null));
                    expect(wrapper.find(".child").text()).toBe("unchanged");
                    return [4 /*yield*/, new Promise(function (resolve) { return wrapper.setState({ textContent: "updated" }, resolve); })];
                case 1:
                    _a.sent();
                    expect(wrapper.find(".child").text()).toBe("updated");
                    return [2 /*return*/];
            }
        });
    }); });
});
