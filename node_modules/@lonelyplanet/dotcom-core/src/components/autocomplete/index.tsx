import MoreLink from "backpack-ui/dist/components/moreLink";
import { Heading } from "backpack-ui/dist/components/text";
import * as cn from "classnames";
import * as React from "react";
import cleanQuery from "../../helpers/cleanQuery";
import Template from "../../templates/template";
import Container from "../_backpack/container";
import Overlay from "../_backpack/overlay";
import { AutocompleteResults } from "../autocompleteResults";
import SearchInput from "../searchInput";
import SearchInputCancelButton from "../searchInputCancelButton";
import * as styles from "./styles.css";

export class GlobalAutocomplete extends React.PureComponent {
  public delaySearch = 150;
  public delayTimer;
  public scrollTimer;
  public autocomplete: React.RefObject<HTMLInputElement>;
  public state;

  constructor(props) {
    super(props);

    this.state = {
      keyword: "",
      isOpen: false,
      places: [],
      pois: [],
      news: [],
    };

    this.autocomplete = React.createRef<HTMLInputElement>();
  }

  public componentDidMount() {
    const $ = (window as any).$;
    const $search = $(".js-lp-global-header-search, .js-lp-search");
    $search.on("click", e => {
      e.preventDefault();

      this.setState({
        isOpen: true,
      });

      this.disableScrolling();
      this.autocomplete.current.focus();
    });

    if (typeof document !== "undefined") {
      document.addEventListener("keydown", this.handleKeydown);
    }
  }

  public componentDidUpdate(prevProps, prevState) {
    clearTimeout(this.scrollTimer);

    if (this.state.keyword !== "" && this.state.keyword === prevState.keyword) {
      const $ = (window as any).$;
      const $results = $(".js-templateAreaResultsAutocomplete");
      const $keywords = $(".js-templateAreaKeywordsAutocomplete");

      $results.on("scroll", e => {
        e.preventDefault();

        this.scrollTimer = setTimeout(() => {
          if ($results.scrollTop() > 10) {
            $keywords.addClass("lp-global-templateAreaKeywordsAutocompleteShadow");
          } else {
            $keywords.removeClass("lp-global-templateAreaKeywordsAutocompleteShadow");
          }
        }, 50);
      });
    }
  }

  public componentWillUnmount() {
    if (typeof document !== "undefined") {
      document.removeEventListener("keydown", this.handleKeydown);
    }
  }

  public render() {
    const totalResults = this.state.places.length + this.state.pois.length + this.state.news.length;

    return (
      <React.Fragment>
        {this.state.isOpen && (
          <React.Fragment>
            <div
              className={
                cn(
                  styles.autocomplete,
                  totalResults > 0 && styles.autocompleteWithResults,
                )
              }
            >
              <Template.Autocomplete>
                <Template.Position area="keywords">
                  <Container>
                    <form
                      action={`https://www.lonelyplanet.com/search?q=${encodeURI(this.state.keyword)}`}
                      className={styles.autocompleteSearchForm}
                      onSubmit={(e) => {
                        e.preventDefault();
                        window.location.href =
                          `https://www.lonelyplanet.com/search?q=${encodeURI(this.state.keyword)}`;
                      }}
                    >
                      <label
                        className={styles.autocompleteInputLabel}
                        htmlFor="lp-search-input"
                      >
                        {/* Use rizzo-next icon for consistency with global header */}
                        <svg className="svg-icon" viewBox="0 0 32 32" aria-hidden="true">
                          <path d="M32 30.2l-8.4-8.4c2-2.4 3-5.3 3-8.4 0-7.4-6-13.4-13.3-13.4s-13.3 6-13.3 13.3 6 13.3 13.3 13.3c3.1 0 6.1-1.1 8.4-3l8.4 8.4 1.9-1.8zM2.6 13.3c0-5.9 4.8-10.7 10.7-10.7s10.7 4.8 10.7 10.7c0 2.8-1.1 5.5-3 7.5-2 2.1-4.8 3.2-7.7 3.2-5.9 0-10.7-4.8-10.7-10.7z" />
                        </svg>
                      </label>

                      <SearchInput
                        onChange={this.handleSearch}
                        placeholder="Search places, cities, countries and continents"
                        ref={this.autocomplete}
                        value={this.state.keyword}
                        id="lp-search-input"
                      />

                      <SearchInputCancelButton
                        onClick={this.handleClickAway}
                      />
                    </form>
                  </Container>
                </Template.Position>

                {totalResults > 0 &&
                  <Template.Position area="results">
                    <Container className={styles.autocompleteResultsContainer}>
                      {this.state.places && this.state.places.length > 0 &&
                        <div className={styles.autocompleteResults}>
                          <Heading
                            className={styles.autocompleteHeading}
                            level={2}
                            size={6}
                            weight="light"
                          >
                            Destinations
                          </Heading>

                          <AutocompleteResults.List
                            items={this.state.places}
                          />
                        </div>
                      }

                      {this.state.pois && this.state.pois.length > 0 &&
                        <div className={styles.autocompleteResults}>
                          <Heading
                            className={styles.autocompleteHeading}
                            level={2}
                            size={6}
                            weight="light"
                          >
                            Points of interest
                          </Heading>

                          <AutocompleteResults.List
                            items={this.state.pois}
                          />
                        </div>
                      }

                      {this.state.news && this.state.news.length > 0 &&
                        <div className={styles.autocompleteResults}>
                          <Heading
                            className={styles.autocompleteHeading}
                            level={2}
                            size={6}
                            weight="light"
                          >
                            News and articles
                          </Heading>

                          <AutocompleteResults.List
                            items={this.state.news}
                          />
                        </div>
                      }
                    </Container>

                    <Container className={styles.autocompleteLinkContainer}>
                      <div className={styles.autocompleteLink}>
                        <MoreLink
                          href={`https://www.lonelyplanet.com/search?q=${encodeURI(this.state.keyword)}`}
                          size="small"
                          caps
                        >
                          See all results
                        </MoreLink>
                      </div>
                    </Container>
                  </Template.Position>
                }
              </Template.Autocomplete>
            </div>

            <Overlay onClick={this.handleClickAway} />
          </React.Fragment>
        )}
      </React.Fragment>
    );
  }

  private clearData() {
    this.setState({
      places: [],
      pois: [],
      news: [],
    });
  }

  private resetInput() {
    this.setState({
      keyword: "",
      isOpen: false,
    });
  }

  private async fetchData() {
    const resultsMax = 4;
    const query = cleanQuery(this.state.keyword);

    if (query.length) {
      const [places, pois, news] = await Promise.all([
        this.callFetch(query, "place"),
        this.callFetch(query, "poi"),
        this.callFetch(query, "video,article,news"),
      ]);

      this.setState({
        places: places.data.slice(0, resultsMax),
        pois: pois.data.slice(0, resultsMax),
        news: news.data.slice(0, resultsMax),
      });
    } else {
      this.clearData();
    }
  }

  private async callFetch(query, type) {
    const response = await fetch(`https://www.lonelyplanet.com/search/api?q=${query}&type=${type}`);
    if (!response.ok) {
      return { total: 0, data: [], error: true };
    }
    return await response.json();
  }

  private handleSearch = e => {
    clearTimeout(this.delayTimer);

    if (e.target.value !== this.state.keyword) {
      this.setState({ keyword: e.target.value }, () => {
        this.delayTimer = setTimeout(() => {
          this.fetchData();
        }, this.delaySearch);
      });
    }
  }

  private handleClickAway = e => {
    e.preventDefault();

    this.resetInput();
    this.clearData();
    this.enableScrolling();
    this.autocomplete.current.blur();
  }

  private handleKeydown = e => {
    if (e.keyCode === 27 && this.state.isOpen) {
      e.preventDefault();

      this.resetInput();
      this.clearData();
      this.enableScrolling();
    }
  }

  private disableScrolling() {
    if (typeof document !== "undefined") {
      document.documentElement.style.height = "100%";
      document.documentElement.style.overflow = "hidden";
      document.body.style.height = "100%";
      document.body.style.overflow = "hidden";
    }
  }

  private enableScrolling() {
    if (typeof document !== "undefined") {
      document.documentElement.removeAttribute("style");
      document.body.removeAttribute("style");
    }
  }
}

export default GlobalAutocomplete;
