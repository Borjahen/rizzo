var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
import * as AWS from "aws-sdk";
import * as fs from "fs";
import * as glob from "glob";
import * as fetch from "isomorphic-fetch";
import * as path from "path";
import * as pkg from "../../package.json";
import { S3Uploader } from "../classes/uploader";
// Stand up s3 and base variables
var s3 = new AWS.S3();
var s3Bucket = "static-asset";
var baseKey = "dotcom-core";
var version = pkg.version;
var libDir = "lib";
// Create an instance of the uploader
var uploader = new S3Uploader();
// Grab built files from the lib directory
var files = glob.sync(libDir + "/**/*.?(css|html|js|map)");
// Generate a list of keys and contents to upload
var keys = files.map(function (filename) {
    var filePath = path.join(process.cwd(), filename);
    var basename = path.relative(path.join(process.cwd(), libDir), filename);
    var body = fs.readFileSync(filePath).toString();
    var key = baseKey + "/" + version + "/" + basename;
    return [key, body];
});
// Perform the upload
var promises = keys.map(function (_a) {
    var key = _a[0], body = _a[1];
    return uploader.upload({ key: key, body: body });
});
// Create a version.json file based on what's in the package.json
var componentsKey = baseKey + "/version.json";
var componentsBody = JSON.stringify({
    version: version,
});
Promise.all(promises.concat([
    uploader.upload({
        key: componentsKey,
        body: componentsBody,
    }),
]))
    .then(function (results) { return __awaiter(_this, void 0, void 0, function () {
    var purges, responses, messages, oks;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                // tslint:disable-next-line:no-console
                console.log("Uploaded " + results.length + " files to s3.");
                purges = keys.concat([[componentsKey,]]).map(function (_a) {
                    var key = _a[0];
                    var url = "https://assets.staticlp.com/" + key;
                    // tslint:disable-next-line:no-console
                    console.log("Purging " + url + ".");
                    return fetch(url, {
                        method: "PURGE",
                    });
                });
                return [4 /*yield*/, Promise.all(purges)];
            case 1:
                responses = _a.sent();
                return [4 /*yield*/, Promise.all(responses.map(function (r) { return r.json(); }))];
            case 2:
                messages = _a.sent();
                oks = messages.filter(function (m) { return m.status === "ok"; }).length;
                // tslint:disable-next-line:no-console
                console.log("Done.");
                return [2 /*return*/];
        }
    });
}); })
    .catch(function (error) {
    // tslint:disable-next-line:no-console
    console.error(error);
    process.exit(1);
});
