import * as React from "react";

export interface IAsyncComponentState {
  Component?: typeof React.Component;
}

export type IGetComponent = () => Promise<typeof React.Component>;

export default function asyncComponent(getComponent: IGetComponent) {
  let ComponentCache: typeof React.Component = null;

  return class AsyncComponent extends React.Component<null, IAsyncComponentState> {
    public state: {
      Component?: typeof React.Component,
    };

    constructor(props) {
      super(props);
      this.state = { Component: ComponentCache };
    }

    public componentWillMount() {
      if (!this.state.Component) {
        getComponent().then((Component) => {
          ComponentCache = Component;

          this.setState({ Component });
        });
      }
    }

    public render() {
      const { Component } = this.state;

      if (Component) {
        return <Component {...this.props} />;
      }
      return null;
    }
  };
}
