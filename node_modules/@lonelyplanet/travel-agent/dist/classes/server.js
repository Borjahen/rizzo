"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var express_1 = require("express");
var inversify_1 = require("inversify");
var path = require("path");
var container_1 = require("../config/container");
var types_1 = require("../types");
var reactEngine_1 = require("./reactEngine");
var findMatchingRoutes_1 = require("../utils/findMatchingRoutes");
var logger_1 = require("../utils/logger");
var TravelAgentServer = /** @class */ (function () {
    function TravelAgentServer(express, expressRouter, middlewareResolver, controllerFactory, controllerRegistry, cwd, isProdEnv) {
        this.app = express;
        this.middlewareResolver = middlewareResolver;
        this.controllerFactory = controllerFactory;
        this.controllerRegistry = controllerRegistry;
        this.container = container_1.default;
        this.routes = [];
        this.defaultRouter = expressRouter;
        this.cwd = cwd;
        this.isProdEnv = isProdEnv;
        this.createDefaultRoute = this.createDefaultRoute.bind(this);
    }
    TravelAgentServer.prototype.use = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return (_a = this.app).use.apply(_a, args);
        var _a;
    };
    TravelAgentServer.prototype.setup = function () {
        this.middlewareResolver.middleware(this);
        this.createViewEngine();
    };
    TravelAgentServer.prototype.postSetup = function () {
        this.middlewareResolver.beforeRoutesMiddleware(this);
        this.addDefaultRoute(this.defaultRouter);
        this.middlewareResolver.postMiddleware(this);
    };
    TravelAgentServer.prototype.bind = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return container_1.default.bind.apply(container_1.default, args);
    };
    TravelAgentServer.prototype.addModules = function () {
        var _this = this;
        var controllers = this.controllerRegistry.register();
        controllers.forEach(function (controller) {
            inversify_1.injectable()(controller);
            container_1.default.bind(controller.name).to(controller);
            (_a = _this.routes).push.apply(_a, _this.buildRouteObjects(controller));
            var _a;
        });
    };
    TravelAgentServer.prototype.buildRouteObjects = function (controller) {
        return Object.keys(controller.routes).reduce(function (memo, key) {
            var split = key.split(" ");
            var method = split[0].toLocaleLowerCase();
            var url = split[1];
            var handler = controller.routes[key];
            memo.push({
                handler: handler,
                method: method,
                url: url,
                middleware: [],
                routes: controller.routes,
                controller: controller,
            });
            return memo;
        }, []);
    };
    TravelAgentServer.prototype.addDefaultRoute = function (router) {
        router
            .route("*")
            .get(this.createDefaultRoute("get"))
            .post(this.createDefaultRoute("post"))
            .patch(this.createDefaultRoute("patch"))
            .delete(this.createDefaultRoute("delete"));
        this.app.use(router);
    };
    TravelAgentServer.prototype.createDefaultRoute = function (method) {
        var _this = this;
        return function (req, res, next) {
            var matchingRoutes = findMatchingRoutes_1.default(req.path, method, _this.routes);
            if (!matchingRoutes.length) {
                return next();
            }
            if (matchingRoutes.length > 1) {
                var matches = matchingRoutes.map(function (route, index) {
                    return "\n" + (index + 1) + ": Controller " + route.controllerName + " - method " + route.handler;
                });
                logger_1.default.warn.apply(logger_1.default, ["Multiple matching routes for route " + method.toUpperCase() + " " + req.path].concat(matches));
            }
            var route = matchingRoutes[0];
            req.params = route.params;
            _this.controllerFactory.create(req, res, next, route.controllerName, route.handler);
        };
    };
    TravelAgentServer.prototype.createViewEngine = function () {
        var _this = this;
        if (this.isProdEnv) {
            this.app.engine("js", reactEngine_1.default({
                layout: "dist/layout",
                isProdEnv: true,
            }));
            this.app.set("views", ["dist/modules", "dist"].map(function (p) { return path.join(_this.cwd, p); })); // specify the views directory
            this.app.set("view engine", "js"); // register the template engine
        }
        else {
            this.app.engine("tsx", reactEngine_1.default());
            this.app.set("views", ["app/modules", "app"].map(function (p) { return path.join(_this.cwd, p); })); // specify the views directory
            this.app.set("view engine", "tsx"); // register the template engine
        }
    };
    TravelAgentServer = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(types_1.default.express)),
        __param(1, inversify_1.inject(types_1.default.expressRouter)),
        __param(2, inversify_1.inject(types_1.default.IMiddlewareProvider)),
        __param(3, inversify_1.inject(types_1.default.IControllerFactory)),
        __param(4, inversify_1.inject(types_1.default.IControllerRegistry)),
        __param(5, inversify_1.inject(types_1.default.ICwd)),
        __param(6, inversify_1.inject(types_1.default.IIsProdEnv)),
        __metadata("design:paramtypes", [Function, Function, Object, Object, Object, String, Boolean])
    ], TravelAgentServer);
    return TravelAgentServer;
}());
exports.default = TravelAgentServer;
