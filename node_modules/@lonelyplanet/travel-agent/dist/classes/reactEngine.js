"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var React = require("react");
// import * as pretty from "pretty";
var server_1 = require("react-dom/server");
var getBundledAssets_1 = require("../utils/getBundledAssets");
var react_helmet_1 = require("react-helmet");
function getInitialState(options) {
    var locals = __assign({}, options);
    delete locals.webpackStats;
    delete locals.settings;
    delete locals._locals;
    delete locals.cache;
    return JSON.stringify(locals);
}
exports.getInitialState = getInitialState;
function getMarkupWithDoctype(markup) {
    return "<!DOCTYPE html>  " + markup;
}
exports.getMarkupWithDoctype = getMarkupWithDoctype;
function generateMarkup(req, filePath, options, defaultLayout) {
    var Component = req("" + filePath).default;
    var markup = server_1.renderToString(React.createElement(Component, options, null));
    if (options.layout === false || filePath.indexOf("error") > -1) {
        return markup;
    }
    var Layout = req(path.join(process.cwd(), options.layout || defaultLayout))
        .default;
    var assets = getBundledAssets_1.default();
    var initialState = getInitialState(options);
    var head = react_helmet_1.default.renderStatic();
    // pretty(markup) for prod?
    return server_1.renderToStaticMarkup(React.createElement(Layout, __assign({}, options, { assets: assets, body: markup, initialState: initialState,
        head: head })));
}
exports.generateMarkup = generateMarkup;
exports.default = (function (engineOptions, req) {
    if (engineOptions === void 0) { engineOptions = {
        layout: "app/layout",
        isProdEnv: false,
    }; }
    if (req === void 0) { req = require; }
    function ReactEngine(filePath, options, callback) {
        try {
            var markup = getMarkupWithDoctype(generateMarkup(req, filePath, options, engineOptions.layout));
            return callback(null, markup);
        }
        catch (e) {
            return callback(e);
        }
        finally {
            // For prod, remove all files from the module cache that are in the view folder.
            if (!engineOptions.isProdEnv) {
                var moduleDetectRegEx_1 = /.*\.tsx$/;
                Object.keys(req.cache).forEach(function (module) {
                    if (moduleDetectRegEx_1.test(req.cache[module].filename)) {
                        delete req.cache[module];
                    }
                });
            }
        }
    }
    return ReactEngine;
});
