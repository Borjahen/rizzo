/// <reference types="express" />
import * as express from "express";
import { IPrometheusConfigurationOptions } from "../middleware/prometheus";
import { IRequireConstructor } from "../interfaces/index";
export interface ICustomMiddlewareObject {
    route?: string;
    resolve?: () => ICustomMiddleware;
    fn?: ICustomMiddleware;
}
export declare type ICustomMiddleware = express.RequestHandler | express.ErrorRequestHandler | [string, express.RequestHandler | express.ErrorRequestHandler] | ICustomMiddlewareObject;
export interface IUserConfig {
    [key: string]: any;
    prometheus?: IPrometheusConfigurationOptions;
    airbrakeId?: string;
    airbrakeKey?: string;
    webpack?: any;
    middleware?: ICustomMiddleware[];
    postMiddleware?: ICustomMiddleware[];
    sendProductionErrors?: boolean;
    production?: IUserConfig;
    serveAssets?: boolean;
    disableDefaultLoggingMiddleware?: boolean;
}
export interface IUserConfigResolver {
    resolve(): IUserConfig;
}
export default class UserConfigResolver implements IUserConfigResolver {
    middlewarePath: string;
    require: IRequireConstructor;
    private cwd;
    constructor(require: any, cwd: string);
    resolve(): any;
}
