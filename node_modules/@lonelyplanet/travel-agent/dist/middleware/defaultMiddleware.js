"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable: object-literal-sort-keys */
var express = require("express");
var path = require("path");
var AirbrakeClient = require("airbrake-js");
var makeErrorHandler = require("airbrake-js/dist/instrumentation/express");
var errorHandler_1 = require("./errorHandler");
var catchAll_1 = require("./catchAll");
var airbrakeCreds_1 = require("../classes/airbrakeCreds");
var setLocation_1 = require("./setLocation");
var handleFavicon_1 = require("./handleFavicon");
var health = express.Router();
health.get("/health-check", function (req, res) {
    res.json({
        success: true,
    });
});
var shouldEnableDefaultLoggers = function (options) {
    return !options.disableDefaultLoggingMiddleware;
};
exports.defaultMiddleware = function (options, req) {
    if (req === void 0) { req = require; }
    return [
        req("helmet")(),
        req("body-parser").urlencoded({ extended: false }),
        req("cookie-parser")(),
        req("cors")(),
        req("body-parser").json(),
        setLocation_1.default,
        handleFavicon_1.default,
        health,
    ];
};
exports.defaultDevMiddleware = function (options, req) {
    if (req === void 0) { req = require; }
    var middleware = [express.static(path.join(process.cwd(), "public"))];
    if (shouldEnableDefaultLoggers(options)) {
        middleware.push(req("morgan")("dev"));
    }
    if (options.webpack) {
        var webpack = req("webpack");
        var config = req("../webpack/config").default;
        var compiler = webpack(config);
        middleware.push(req("webpack-hot-middleware")(compiler), req("webpack-dev-middleware")(compiler, {
            noInfo: true,
            publicPath: "/assets/",
            serverSideRender: true,
        }));
    }
    return middleware;
};
exports.defaultTestMiddleware = function (options, req) {
    if (req === void 0) { req = require; }
    var middleware = [];
    return middleware;
};
exports.defaultProductionMiddleware = function (options, name, req) {
    if (name === void 0) { name = process.env.LP_SERVICE_ID; }
    if (req === void 0) { req = require; }
    var middleware = [];
    if (shouldEnableDefaultLoggers(options)) {
        var excludes = [
            "body",
            "short-body",
            "req-headers",
            "res-headers",
            "req",
            "res",
            "incoming",
            "response-hrtime",
        ];
        middleware.push(req("express-bunyan-logger")({
            name: name || "travel-agent-server",
            parseUA: false,
            excludes: excludes,
        }));
    }
    if (options.serveAssets) {
        middleware.push(express.static(path.join(process.cwd(), "public")));
    }
    return middleware;
};
var getAirbrakeCreds = function (options) {
    if (options.airbrakeId && options.airbrakeKey) {
        return new airbrakeCreds_1.default(options.airbrakeId, options.airbrakeKey);
    }
    else if (options.production &&
        (options.production.airbrakeId || options.production.airbrakeKey)) {
        return new airbrakeCreds_1.default(options.production.airbrakeId, options.production.airbrakeKey);
    }
    return new airbrakeCreds_1.default();
};
exports.defaultPostMiddleware = function (isProdEnv, options, app) {
    var middleware = [];
    var airbrakeCreds = getAirbrakeCreds(options);
    if (isProdEnv && airbrakeCreds.airbrakeId && airbrakeCreds.airbrakeKey) {
        var airbrake = new AirbrakeClient({
            projectId: airbrakeCreds.airbrakeId,
            projectKey: airbrakeCreds.airbrakeKey,
        });
        middleware.push(makeErrorHandler(airbrake));
    }
    middleware.push(catchAll_1.default, errorHandler_1.default(isProdEnv, {
        sendProductionErrors: options.sendProductionErrors,
    }));
    return middleware;
};
