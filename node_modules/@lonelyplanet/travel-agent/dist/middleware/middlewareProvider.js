"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var types_1 = require("../types");
var prometheus_1 = require("./prometheus");
exports.applyMiddleware = function (app) {
    var middleware = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        middleware[_i - 1] = arguments[_i];
    }
    var allMiddleware = middleware.reduce(function (memo, m) { return memo.concat(m); }, []);
    allMiddleware.forEach(function (key) {
        if (Array.isArray(key) && key.length === 2) {
            var _a = key, path = _a[0], fn = _a[1];
            app.use(path, fn);
        }
        else if (typeof key === "object" && key) {
            var options = key;
            var route = options.route || "/";
            if (options.resolve) {
                app.use(route, options.resolve());
            }
            else {
                app.use(route, options.fn);
            }
        }
        else {
            app.use(key);
        }
    });
    return allMiddleware;
};
var MiddlewareProvider = /** @class */ (function () {
    function MiddlewareProvider(nodeEnv, customMiddlewareResolver) {
        this.nodeEnv = nodeEnv;
        this.userConfigResolver = customMiddlewareResolver;
        this.userConfig = this.userConfigResolver.resolve();
    }
    MiddlewareProvider.prototype.middleware = function (app) {
        var middleware;
        if (this.nodeEnv === "test") {
            middleware = this.defaultTestMiddleware();
        }
        else if (this.nodeEnv === "production") {
            middleware = this.defaultProductionMiddleware(this.userConfig);
        }
        else {
            middleware = this.defaultDevMiddleware(this.userConfig);
        }
        return exports.applyMiddleware(app, this.defaultMiddleware(this.userConfig), middleware, this.userConfig.middleware);
    };
    MiddlewareProvider.prototype.postMiddleware = function (app) {
        var middleware;
        if (this.nodeEnv === "test") {
            middleware = [];
        }
        else {
            middleware = this.defaultPostMiddleware(this.nodeEnv === "production", __assign({}, this.userConfig), app);
        }
        return exports.applyMiddleware(app, middleware, this.userConfig.postMiddleware || []);
    };
    MiddlewareProvider.prototype.beforeRoutesMiddleware = function (app) {
        var config = this.userConfig;
        var middleware;
        if (this.nodeEnv === "test") {
            middleware = [];
        }
        else {
            middleware = [
                prometheus_1.default(__assign({}, (config.prometheus || {}), { routes: app.routes.reduce(function (m, r) {
                        m.push({
                            route: r.url,
                            name: r.controller.name + "#" + r.handler,
                        });
                        return m;
                    }, []) })),
            ];
        }
        return exports.applyMiddleware(app, middleware);
    };
    __decorate([
        inversify_1.inject(types_1.default.DefaultMiddleware),
        __metadata("design:type", Function)
    ], MiddlewareProvider.prototype, "defaultMiddleware", void 0);
    __decorate([
        inversify_1.inject(types_1.default.DefaultProductionMiddleware),
        __metadata("design:type", Function)
    ], MiddlewareProvider.prototype, "defaultProductionMiddleware", void 0);
    __decorate([
        inversify_1.inject(types_1.default.DefaultTestMiddleware),
        __metadata("design:type", Function)
    ], MiddlewareProvider.prototype, "defaultTestMiddleware", void 0);
    __decorate([
        inversify_1.inject(types_1.default.DefaultDevMiddleware),
        __metadata("design:type", Function)
    ], MiddlewareProvider.prototype, "defaultDevMiddleware", void 0);
    __decorate([
        inversify_1.inject(types_1.default.DefaultPostMiddleware),
        __metadata("design:type", Function)
    ], MiddlewareProvider.prototype, "defaultPostMiddleware", void 0);
    MiddlewareProvider = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(types_1.default.NodeEnv)),
        __param(1, inversify_1.inject(types_1.default.IUserConfigResolver)),
        __metadata("design:paramtypes", [String, Object])
    ], MiddlewareProvider);
    return MiddlewareProvider;
}());
exports.default = MiddlewareProvider;
