"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable: no-console */
var dotenv = require("dotenv");
var http = require("http");
var path = require("path");
var container_1 = require("./config/container");
var types_1 = require("./types");
var hook = require("css-modules-require-hook");
var chokidar = require("chokidar");
if (process.env.NODE_ENV === "development") {
    chokidar
        .watch(path.join(process.cwd(), "app"), {
        ignored: /(^|[\/\\])\../,
    })
        .on("change", function (path) {
        Object.keys(require.cache).forEach(function (id) {
            if (/\/app\//.test(id)) {
                delete require.cache[id];
            }
        });
    });
}
hook({
    generateScopedName: "[name]__[local]___[hash:base64:5]",
    rootDir: path.resolve(process.cwd(), process.env.NODE_ENV === "production" ? "dist" : "app"),
});
var inversify_1 = require("inversify");
exports.inject = inversify_1.inject;
exports.injectable = inversify_1.injectable;
var controller_1 = require("./classes/controller");
exports.Controller = controller_1.Controller;
__export(require("./classes/decorators"));
function normalizePort(val) {
    var port = typeof val === "string" ? parseInt(val, 10) : val;
    if (isNaN(port)) {
        return val;
    }
    else if (port >= 0) {
        return port;
    }
    else {
        return false;
    }
}
dotenv.config({
    path: process.env.ENV_PATH || path.join(process.cwd(), ".env"),
    silent: true,
});
var start = function (options) {
    if (options === void 0) { options = {
        startWithoutHttp: false,
    }; }
    var port = normalizePort(process.env.PORT || 3000);
    var travelAgent = container_1.default.get(types_1.default.ITravelAgentServer);
    try {
        travelAgent.setup();
        travelAgent.addModules();
        travelAgent.postSetup();
    }
    catch (e) {
        console.log("An error occured starting the server...");
        console.log(e);
        process.exit(1);
    }
    if (!options.startWithoutHttp) {
        var server = http.createServer(travelAgent.app);
        server.listen(port);
        server.on("error", onError);
        server.on("listening", createOnListening(server));
    }
    function onError(error) {
        if (error.syscall !== "listen") {
            throw error;
        }
        var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
        switch (error.code) {
            case "EACCES":
                console.error(bind + " requires elevated privileges");
                process.exit(1);
                break;
            case "EADDRINUSE":
                console.error(bind + " is already in use");
                process.exit(1);
                break;
            default:
                throw error;
        }
    }
    function createOnListening(server) {
        return function () {
            var addr = server.address();
            var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
            console.log("Listening on " + bind);
        };
    }
    return travelAgent;
};
exports.default = start;
