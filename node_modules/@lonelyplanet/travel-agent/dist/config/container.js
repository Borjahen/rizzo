"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var inversify_1 = require("inversify");
var controllerFactory_1 = require("../classes/controllerFactory");
var controllerRegistry_1 = require("../classes/controllerRegistry");
var server_1 = require("../classes/server");
var userConfigResolver_1 = require("../classes/userConfigResolver");
var defaultMiddleware_1 = require("../middleware/defaultMiddleware");
var middlewareProvider_1 = require("../middleware/middlewareProvider");
var types_1 = require("../types");
var container = new inversify_1.Container();
container.bind(types_1.default.express).toFactory(function () {
    return express();
});
container.bind(types_1.default.expressRouter).toFactory(function () {
    return express.Router();
});
container
    .bind(types_1.default.IControllerFactory)
    .to(controllerFactory_1.default);
container
    .bind(types_1.default.IControllerRegistry)
    .to(controllerRegistry_1.default);
container
    .bind(types_1.default.ITravelAgentServer)
    .to(server_1.default);
container
    .bind(types_1.default.IMiddlewareProvider)
    .to(middlewareProvider_1.default);
container
    .bind(types_1.default.IUserConfigResolver)
    .to(userConfigResolver_1.default);
container.bind(types_1.default.IRequireConstructor).toConstantValue(require);
container.bind(types_1.default.DefaultMiddleware).toFactory(function () { return defaultMiddleware_1.defaultMiddleware; });
container
    .bind(types_1.default.DefaultProductionMiddleware)
    .toFactory(function () { return defaultMiddleware_1.defaultProductionMiddleware; });
container
    .bind(types_1.default.DefaultDevMiddleware)
    .toFactory(function () { return defaultMiddleware_1.defaultDevMiddleware; });
container
    .bind(types_1.default.DefaultPostMiddleware)
    .toFactory(function () { return defaultMiddleware_1.defaultPostMiddleware; });
container
    .bind(types_1.default.DefaultTestMiddleware)
    .toFactory(function () { return defaultMiddleware_1.defaultTestMiddleware; });
container.bind("container").toConstantValue(container);
container.bind(types_1.default.ICwd).toConstantValue(process.cwd());
container
    .bind(types_1.default.IIsProdEnv)
    .toConstantValue(process.env.NODE_ENV === "production");
container.bind(types_1.default.NodeEnv).toConstantValue(process.env.NODE_ENV);
exports.default = container;
