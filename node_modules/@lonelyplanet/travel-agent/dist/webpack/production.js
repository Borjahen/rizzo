"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ChunkManifestPlugin = require("chunk-manifest-webpack-plugin");
var ExtractTextPlugin = require("extract-text-webpack-plugin");
var path = require("path");
var webpack = require("webpack");
var WebpackChunkHash = require("webpack-chunk-hash");
var webpackMerge = require("webpack-merge");
var common_1 = require("./common");
var config_1 = require("./config");
var loaders_1 = require("./loaders");
var userConfig_1 = require("./userConfig");
var userProductionConfig_1 = require("./userProductionConfig");
var productionConfig = {
    entry: {},
    bail: true,
    stats: "errors-only",
    output: {
        chunkFilename: "[name]-chunk-[chunkhash].js",
        filename: "[name].[chunkhash].js",
        path: path.join(process.cwd(), "public", "assets"),
        publicPath: "/assets/",
    },
    module: {
        rules: loaders_1.getLoaders("prod").slice(),
    },
    plugins: common_1.commonPlugins.concat([
        new ChunkManifestPlugin({
            filename: "webpackChunkManifest.json",
            inlineManifest: false,
            manifestVariable: "webpackManifest",
        }),
        new WebpackChunkHash(),
        new webpack.HashedModuleIdsPlugin(),
        new webpack.optimize.UglifyJsPlugin({
            sourceMap: userProductionConfig_1.default.devtool,
            beautify: false,
            comments: false,
            compress: {
                screw_ie8: true,
            },
            mangle: {
                keep_fnames: true,
                screw_ie8: true,
            },
        }),
        new webpack.DefinePlugin({
            "process.env": {
                NODE_ENV: JSON.stringify("production"),
            },
        }),
        new ExtractTextPlugin("[name].[chunkhash].css", {
            disable: false,
            allChunks: true,
        }),
    ]),
    resolve: __assign({}, config_1.default.resolve),
    resolveLoader: __assign({}, config_1.default.resolveLoader),
};
exports.default = webpackMerge(productionConfig, userConfig_1.userConfig, userProductionConfig_1.default);
