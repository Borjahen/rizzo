"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var ExtractTextPlugin = require("extract-text-webpack-plugin");
var autoprefixer = require("autoprefixer");
var gridSpan = require("postcss-grid-span");
var map = require("postcss-map");
var nested = require("postcss-nested");
var customMedia = require("postcss-custom-media");
var calc = require("postcss-calc");
var styles_1 = require("backpack-ui/dist/styles");
exports.styleLoaders = {
    css: {
        loader: "typings-for-css-modules-loader",
        options: {
            namedExport: true,
            modules: true,
            minimize: false,
            localIdentName: "[name]__[local]___[hash:base64:5]",
            context: path.resolve(process.cwd(), "app"),
        },
    },
    postcss: {
        loader: "postcss-loader",
        options: {
            plugins: function () { return [
                map({
                    maps: [
                        { colors: styles_1.colors },
                        { dimensions: styles_1.dimensions },
                        {
                            fonts: {
                                benton: styles_1.fonts.benton.join(", "),
                                miller: styles_1.fonts.miller.join(", "),
                            },
                        },
                        { mq: styles_1.mq },
                        { spacing: styles_1.spacing },
                        { timing: styles_1.timing },
                        { typography: styles_1.typography },
                        { zIndex: styles_1.zIndex },
                    ],
                }),
                gridSpan({
                    appendUnit: true,
                    columns: 12,
                    gap: 30,
                    maxWidth: 1290,
                }),
                calc(),
                customMedia(),
                nested(),
                autoprefixer({
                    grid: false,
                }),
            ]; },
        },
    },
};
exports.tsLoader = {
    exclude: /node_modules/,
    test: /\.ts(x?)$/,
    use: [
        {
            loader: "ts-loader",
            options: {
                configFile: path.join(process.cwd(), "tsconfig.json"),
            },
        },
    ],
};
exports.cssLoader = {
    test: /\.css$/,
    exclude: /node_modules/,
    use: ["style-loader", exports.styleLoaders.css, exports.styleLoaders.postcss],
};
exports.cssLoaderVendor = {
    test: /\.css$/,
    include: /node_modules/,
    use: ["style-loader", "typings-for-css-modules-loader"],
};
exports.extractCssLoader = {
    test: /\.css$/,
    include: /app/,
    loader: ExtractTextPlugin.extract({
        fallback: "style-loader",
        use: [exports.styleLoaders.css, exports.styleLoaders.postcss],
    }),
};
exports.extractCssLoaderVendor = {
    test: /\.css$/,
    include: /node_modules/,
    loader: ExtractTextPlugin.extract({
        fallback: "style-loader",
        use: ["typings-for-css-modules-loader"],
    }),
};
var loaders = {
    dev: [exports.tsLoader, exports.cssLoader, exports.cssLoaderVendor],
    prod: [exports.tsLoader, exports.extractCssLoader, exports.extractCssLoaderVendor],
};
exports.getLoaders = function (env) { return loaders[env]; };
