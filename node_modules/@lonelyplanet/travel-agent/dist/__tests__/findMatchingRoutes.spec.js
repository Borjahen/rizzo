"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var findMatchingRoutes_1 = require("../utils/findMatchingRoutes");
describe("findMatchingRoutes", function () {
    it("should match all the correct `get` routes", function () {
        var ControllerConstructor = jest.fn(function (name) { return ({ name: name }); });
        var routes = [
            {
                handler: "omg",
                method: "get",
                url: "/omg",
                middleware: [],
                routes: {},
                controller: new ControllerConstructor("omgController"),
            }, {
                handler: "fetch",
                method: "GET",
                url: "/",
                middleware: [],
                routes: {},
                controller: new ControllerConstructor("fetchController"),
            }, {
                handler: "remove",
                method: "DELETE",
                url: "/:id",
                middleware: [],
                routes: {},
                controller: new ControllerConstructor("deleteController"),
            }, {
                handler: "getItem",
                method: "get",
                url: "/:id?",
                middleware: [],
                routes: {},
                controller: new ControllerConstructor("getItemController"),
            },
        ];
        var results = findMatchingRoutes_1.default("/", "GET", routes);
        expect(results).toEqual([
            {
                controllerName: "fetchController",
                handler: "fetch",
                params: {},
            }, {
                controllerName: "getItemController",
                handler: "getItem",
                params: { id: undefined },
            }
        ]);
    });
    it("should match all the correct `post` routes", function () {
        var ControllerConstructor = jest.fn(function (name) { return ({ name: name }); });
        var routes = [
            {
                handler: "save",
                method: "POST",
                url: "/",
                middleware: [],
                routes: {},
                controller: new ControllerConstructor("saveController"),
            }, {
                handler: "saveItem",
                method: "post",
                url: "/:id",
                middleware: [],
                routes: {},
                controller: new ControllerConstructor("saveItemController"),
            }, {
                handler: "optionalItem",
                method: "post",
                url: "/:optionalId?",
                middleware: [],
                routes: {},
                controller: new ControllerConstructor("optionalItemController"),
            },
        ];
        var results = findMatchingRoutes_1.default("/123", "post", routes);
        expect(results).toEqual([
            {
                controllerName: "saveItemController",
                handler: "saveItem",
                params: {
                    id: "123",
                },
            }, {
                controllerName: "optionalItemController",
                handler: "optionalItem",
                params: {
                    optionalId: "123",
                },
            }
        ]);
    });
    it("should return an empty array when no paths match", function () {
        var ControllerConstructor = jest.fn(function (name) { return ({ name: name }); });
        var routes = [
            {
                handler: "save",
                method: "POST",
                url: "/",
                middleware: [],
                routes: {},
                controller: new ControllerConstructor("saveController"),
            }
        ];
        var results = findMatchingRoutes_1.default("/123", "post", routes);
        expect(results).toEqual([]);
    });
});
