"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var loggerWarn = jest.fn();
jest.mock("../utils/logger", function () { return ({
    default: { debug: jest.fn(), warn: loggerWarn },
}); });
var createEngineDefault = jest.fn();
jest.mock("../classes/reactEngine", function () { return ({ default: createEngineDefault }); });
var controllerRegistryRegister = jest.fn();
jest.mock("../classes/controllerRegistry", function () { return ({
    default: function () { return ({ register: controllerRegistryRegister, controllers: [] }); },
}); });
var controllerRegistry_1 = require("../classes/controllerRegistry");
var controllerFactoryCreate = jest.fn();
jest.mock("../classes/controllerFactory", function () { return ({
    default: function () { return ({ create: controllerFactoryCreate }); },
}); });
var controllerFactory_1 = require("../classes/controllerFactory");
var middlewareResolverMiddleware = jest.fn();
jest.mock("../middleware/middlewareProvider", function () { return ({
    default: function () { return ({ middleware: middlewareResolverMiddleware }); },
}); });
var middlewareProvider_1 = require("../middleware/middlewareProvider");
var mocks = require("node-mocks-http");
var server_1 = require("../classes/server");
describe("TravelAgentServer", function () {
    var mockControllerFactory;
    var mockControllerRegistry;
    var mockMiddlewareResolver;
    var mockExpress;
    var mockExpressRouter;
    var mockCwd = "/dev/my-app";
    var mockIsProdEnv;
    beforeEach(function () {
        mockControllerFactory = jest.fn();
        mockControllerRegistry = jest.fn();
        mockMiddlewareResolver = jest.fn();
        mockExpress = jest.fn();
        mockExpressRouter = jest.fn();
        mockIsProdEnv = false;
    });
    afterEach(function () {
        mockControllerFactory.mockReset();
        mockControllerRegistry.mockReset();
        mockMiddlewareResolver.mockReset();
        mockExpress.mockReset();
        mockExpressRouter.mockReset();
    });
    describe("setup", function () {
        var engine;
        var set;
        beforeEach(function () {
            createEngineDefault.mockReturnValue("createEngine called");
            engine = jest.fn();
            set = jest.fn();
        });
        afterEach(function () {
            createEngineDefault.mockReset();
            engine.mockReset();
            set.mockReset();
            middlewareResolverMiddleware.mockReset();
        });
        it("should set up the middleware in the dev environment", function () {
            var setupTestExpress = jest.fn(function () { return ({
                engine: engine,
                set: set,
            }); });
            var server = new server_1.default(new setupTestExpress(), new mockExpressRouter(), new middlewareProvider_1.default(mockIsProdEnv), new mockControllerFactory(), new mockControllerRegistry(), mockCwd, mockIsProdEnv);
            var results = server.setup();
            expect(middlewareResolverMiddleware).toHaveBeenCalled();
            expect(engine).toHaveBeenCalledWith("tsx", "createEngine called");
            expect(set.mock.calls[0][0]).toEqual("views");
            expect(set.mock.calls[0][1][0]).toContain("/dev/my-app/app/modules");
            expect(set.mock.calls[0][1][1]).toContain("/dev/my-app/app");
            expect(set.mock.calls[1]).toEqual(["view engine", "tsx"]);
        });
        it("should set up the middleware in the prod environment", function () {
            var setupTestExpress = jest.fn(function () { return ({
                engine: engine,
                set: set,
            }); });
            var server = new server_1.default(new setupTestExpress(), new mockExpressRouter(), new middlewareProvider_1.default("development"), new mockControllerFactory(), new mockControllerRegistry(), mockCwd, true);
            var results = server.setup();
            expect(middlewareResolverMiddleware).toHaveBeenCalled();
            expect(engine).toHaveBeenCalledWith("js", "createEngine called");
            expect(createEngineDefault).toHaveBeenCalledWith({
                layout: "dist/layout",
                isProdEnv: true,
            });
            expect(set.mock.calls[0][0]).toEqual("views");
            expect(set.mock.calls[0][1][0]).toContain("/dev/my-app/dist/modules");
            expect(set.mock.calls[0][1][1]).toContain("/dev/my-app/dist");
            expect(set.mock.calls[1]).toEqual(["view engine", "js"]);
        });
    });
    describe("postSetup", function () {
        var req;
        var res;
        var next;
        beforeEach(function () {
            req = mocks.createRequest({ path: "/" });
            res = mocks.createResponse();
            next = jest.fn();
        });
        afterEach(function () {
            next.mockReset();
            controllerFactoryCreate.mockReset();
            loggerWarn.mockReset();
        });
        it("should handle middleware and routes", function () {
            var use = jest.fn();
            var routerDelete = jest.fn();
            var patch = jest.fn(function () { return ({ delete: routerDelete }); });
            var post = jest.fn(function () { return ({ patch: patch }); });
            var get = jest.fn(function () { return ({ post: post }); });
            var route = jest.fn(function () { return ({ get: get }); });
            var beforeRoutesMiddleware = jest.fn();
            var postMiddleware = jest.fn();
            var postSetupTestExpress = jest.fn(function () { return ({
                use: use,
            }); });
            var postSetupTestExpressRouter = jest.fn(function () { return ({
                route: route,
            }); });
            var postSetupTestMiddlewareResolver = jest.fn(function () { return ({
                beforeRoutesMiddleware: beforeRoutesMiddleware,
                postMiddleware: postMiddleware,
            }); });
            var controllerConstructor = jest.fn(function (name) { return ({
                name: name,
            }); });
            var routes = [
                {
                    handler: "omg",
                    method: "get",
                    url: "/omg",
                    middleware: [],
                    routes: {},
                    controller: new controllerConstructor("omgController"),
                },
                {
                    handler: "fetch",
                    method: "GET",
                    url: "/",
                    middleware: [],
                    routes: {},
                    controller: new controllerConstructor("fetchController"),
                },
                {
                    handler: "remove",
                    method: "DELETE",
                    url: "/:id",
                    middleware: [],
                    routes: {},
                    controller: new controllerConstructor("deleteController"),
                },
                {
                    handler: "save",
                    method: "post",
                    url: "/:id?",
                    middleware: [],
                    routes: {},
                    controller: new controllerConstructor("saveController"),
                },
                {
                    handler: "optionalUpdate",
                    method: "patch",
                    url: "/:id?",
                    middleware: [],
                    routes: {},
                    controller: new controllerConstructor("optionalUpdateController"),
                },
                {
                    handler: "update",
                    method: "patch",
                    url: "/:id",
                    middleware: [],
                    routes: {},
                    controller: new controllerConstructor("updateController"),
                },
            ];
            var server = new server_1.default(new postSetupTestExpress(), new postSetupTestExpressRouter(), new postSetupTestMiddlewareResolver(), new controllerFactory_1.default(jest.fn()), new mockControllerRegistry(), mockCwd, mockIsProdEnv);
            server.routes = routes;
            var results = server.postSetup();
            expect(beforeRoutesMiddleware).toHaveBeenCalled();
            expect(postMiddleware).toHaveBeenCalled();
            expect(route).toHaveBeenCalledWith("*");
            var getCreateDefaultRoute = get.mock.calls[0][0];
            getCreateDefaultRoute(req, res, next);
            expect(controllerFactoryCreate.mock.calls[0]).toEqual([
                req,
                res,
                next,
                "fetchController",
                "fetch",
            ]);
            var reqWithPath = mocks.createRequest({ path: "/omg" });
            getCreateDefaultRoute(reqWithPath, res, next);
            expect(controllerFactoryCreate.mock.calls[1]).toEqual([
                reqWithPath,
                res,
                next,
                "omgController",
                "omg",
            ]);
            var postCreateDefaultRoute = post.mock.calls[0][0];
            postCreateDefaultRoute(req, res, next);
            expect(controllerFactoryCreate.mock.calls[2]).toEqual([
                req,
                res,
                next,
                "saveController",
                "save",
            ]);
            var patchCreateDefaultRoute = patch.mock.calls[0][0];
            reqWithPath = mocks.createRequest({ path: "/123" });
            patchCreateDefaultRoute(reqWithPath, res, next);
            expect(controllerFactoryCreate.mock.calls[3]).toEqual([
                reqWithPath,
                res,
                next,
                "optionalUpdateController",
                "optionalUpdate",
            ]);
            expect(loggerWarn).toHaveBeenCalledTimes(1);
            var deleteCreateDefaultRoute = routerDelete.mock.calls[0][0];
            deleteCreateDefaultRoute(req, res, next);
            expect(controllerFactoryCreate).toHaveBeenCalledTimes(4);
            expect(next).toHaveBeenCalledTimes(1);
        });
    });
    describe("addModules", function () {
        beforeEach(function () {
            controllerRegistryRegister.mockReturnValue([
                {
                    default: jest.fn(),
                    routes: { "GET /show-stuff": "show" },
                    name: "TestController",
                },
                {
                    default: jest.fn(),
                    routes: { "GET /data": "fetchData", "POST /data": "saveData" },
                    name: "AnotherController",
                },
            ]);
        });
        afterEach(function () {
            controllerRegistryRegister.mockReset();
        });
        it("should add the controller routes to the server's routes", function () {
            var server = new server_1.default(new mockExpress(), new mockExpressRouter(), new mockMiddlewareResolver(), new mockControllerFactory(), new controllerRegistry_1.default(jest.fn(), mockCwd, mockIsProdEnv), mockCwd, mockIsProdEnv);
            var results = server.addModules();
            expect(server.routes).toMatchSnapshot();
        });
    });
    describe("use", function () {
        it("should invoke this.app.use with the provided arguments", function () {
            var use = jest.fn();
            var useTestExpress = jest.fn(function () { return ({ use: use }); });
            var server = new server_1.default(new useTestExpress(), new mockExpressRouter(), new mockMiddlewareResolver(), new mockControllerFactory(), new mockControllerRegistry(), mockCwd, mockIsProdEnv);
            var results = server.use("a", 2, ["three"]);
            expect(use).toHaveBeenCalledWith("a", 2, ["three"]);
        });
    });
    describe("bind", function () {
        it("should bind the args to the container", function () {
            var server = new server_1.default(new mockExpress(), new mockExpressRouter(), new mockMiddlewareResolver(), new mockControllerFactory(), new mockControllerRegistry(), mockCwd, mockIsProdEnv);
            var results = server.bind("FooService");
            expect(server.container.isBound("FooService")).toBeTruthy();
        });
    });
});
