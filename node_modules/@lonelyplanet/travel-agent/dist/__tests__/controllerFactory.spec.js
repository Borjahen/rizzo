"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var controllerFactory_1 = require("../classes/controllerFactory");
var mocks = require("node-mocks-http");
describe("controller factory", function () {
    var next;
    var fakePromise;
    beforeEach(function () {
        next = jest.fn();
        fakePromise = {
            then: jest.fn(),
            catch: jest.fn(),
        };
    });
    it("should create a basic controller instance", function () {
        var show = jest.fn(function () { return fakePromise; });
        var get = jest.fn(function () { return ({ show: show }); });
        var container = { get: get };
        var factory = new controllerFactory_1.default(container);
        var controller = factory.create(mocks.createRequest(), mocks.createResponse(), next, "home", "show");
        expect(controller.request).toBeTruthy();
        expect(controller.response).toBeTruthy();
        expect(show).toHaveBeenCalled();
        expect(fakePromise.catch).toHaveBeenCalled();
    });
    it("should set the handler name correctly", function () {
        var show = jest.fn(function () { return fakePromise; });
        var get = jest.fn(function () { return ({ show: show }); });
        var container = { get: get };
        var factory = new controllerFactory_1.default(container);
        var mockRequest = mocks.createRequest();
        mockRequest.route = { stack: [{ name: "FirstStackName" }] };
        var controller = factory.create(mockRequest, mocks.createResponse(), next, "home", "show");
        expect(controller.request.route.stack[0].name).toBe("show");
    });
    it("should catch handler errors", function (done) {
        var rejectedProm = Promise.reject("Error calling show");
        var show = jest.fn(function () { return rejectedProm; });
        var get = jest.fn(function () { return ({ show: show }); });
        var container = { get: get };
        var factory = new controllerFactory_1.default(container);
        var controller = factory.create(mocks.createRequest(), mocks.createResponse(), next, "home", "show");
        expect(show).toHaveBeenCalled();
        rejectedProm.catch(function () {
            expect(next).toHaveBeenCalledWith("Error calling show");
            done();
        });
    });
    it("should catch errors", function () {
        var show = jest.fn(function () { throw new Error("oh snap"); });
        var get = jest.fn(function () { return ({ show: show }); });
        var container = { get: get };
        var factory = new controllerFactory_1.default(container);
        var controller = factory.create(mocks.createRequest(), mocks.createResponse(), next, "home", "show");
        expect(controller.request).toBeTruthy();
        expect(controller.response).toBeTruthy();
        expect(show).toHaveBeenCalled();
        expect(next).toHaveBeenCalled();
    });
});
