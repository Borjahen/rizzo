"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var loggerDebug = jest.fn();
jest.mock("../utils/logger", function () { return ({
    default: { debug: loggerDebug, warn: jest.fn() },
}); });
var userConfigResolver_1 = require("../classes/userConfigResolver");
describe("userConfigResolver", function () {
    describe("resolve", function () {
        var req;
        var resolve;
        var testUserConfig;
        beforeEach(function () {
            testUserConfig = {
                middleware: [],
                webpack: {
                    entry: {
                        app: "./app/shared/client"
                    }
                }
            };
            resolve = jest.fn(function () { return "/dev/my-app/config/index.js"; });
            req = jest.fn(function () { return testUserConfig; });
            req.resolve = resolve;
        });
        afterEach(function () {
            resolve.mockReset();
            loggerDebug.mockReset();
        });
        it("should return the user's config file", function () {
            var configResolver = new userConfigResolver_1.default(req, "/dev/my-app");
            var userConfig = configResolver.resolve();
            expect(resolve).toHaveBeenCalledWith("/dev/my-app/config");
            expect(userConfig).toEqual(testUserConfig);
        });
        it("should log errors when accessing the config file", function () {
            var error = new Error("oh snap");
            req.resolve = jest.fn(function () { throw error; });
            var configResolver = new userConfigResolver_1.default(req, "/dev/my-app");
            var userConfig = configResolver.resolve();
            expect(loggerDebug).toHaveBeenCalledWith("Error loading user configuration");
            expect(loggerDebug).toHaveBeenCalledWith(error);
        });
    });
});
