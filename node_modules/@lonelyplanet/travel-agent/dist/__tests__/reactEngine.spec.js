"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var getBundledAssetsDefault = jest.fn();
jest.mock("../utils/getBundledAssets", function () { return ({ default: getBundledAssetsDefault }); });
var reactEngine_1 = require("../classes/reactEngine");
var TestComponent = require("./fixtures/component");
var TestLayout = require("./fixtures/layout");
describe("reactEngine", function () {
    var filePath = "app/modules/home/components";
    var options = {
        message: "This is my message",
        webpackStats: "stats",
        settings: {},
        _locals: "",
        cache: {},
    };
    var requireCache = {
        "ts-file.ts": { filename: "ts-file.ts" },
        "view-file.tsx": { filename: "view-file.tsx" }
    };
    var callback;
    var req;
    beforeEach(function () {
        getBundledAssetsDefault.mockReturnValue({ "vendor.js": "/assets/vendor.js" });
        callback = jest.fn();
        req = jest.fn(function () { return ({ cache: "stuff" }); })
            .mockImplementationOnce(function (id) { return TestComponent; })
            .mockImplementationOnce(function (id) { return TestLayout; });
        req.cache = requireCache;
    });
    afterEach(function () {
        getBundledAssetsDefault.mockReset();
        callback.mockReset();
        req.mockReset();
    });
    describe("getInitialState", function () {
        it("should handle an empty object", function () {
            var result = reactEngine_1.getInitialState({});
            expect(result).toEqual("{}");
        });
        it("should return the JSON string of the correct object", function () {
            var result = reactEngine_1.getInitialState(options);
            expect(result).toEqual("{\"message\":\"This is my message\"}");
        });
    });
    describe("getMarkupWithDoctype", function () {
        it("should add the doctype to the html string", function () {
            var markup = reactEngine_1.getMarkupWithDoctype("<html><body>Hello</body></html>");
            expect(markup).toMatchSnapshot();
        });
    });
    describe("generateMarkup", function () {
        it("should generate the correct markup", function () {
            var markup = reactEngine_1.generateMarkup(req, filePath, options, "app/layout");
            expect(markup).toMatchSnapshot();
        });
        it("should generate the correct markup if the layout is false", function () {
            var extendedOptions = __assign({}, options, { layout: false });
            var markup = reactEngine_1.generateMarkup(req, filePath, extendedOptions, "app/layout");
            expect(markup).toMatchSnapshot();
        });
    });
    describe("reactEngine default", function () {
        it("should call the callback with the correct markup", function () {
            reactEngine_1.default({ layout: "app/layout" }, req)(filePath, options, callback);
            expect(callback).toHaveBeenCalled();
            expect(callback.mock.calls[0]).toMatchSnapshot();
            expect(req.cache).toEqual(requireCache);
        });
        it("should hande errors when trying to generate markup", function () {
            var error = new Error("oh snap");
            getBundledAssetsDefault.mockImplementation(function () { throw error; });
            reactEngine_1.default({ layout: "app/layout" }, req)(filePath, options, callback);
            expect(callback).toHaveBeenCalledWith(error);
        });
        it("should remove cached views from require in a prod environment", function () {
            reactEngine_1.default({ layout: "app/layout", isProdEnv: true }, req)(filePath, options, callback);
            expect(callback).toHaveBeenCalled();
            expect(req.cache).toEqual({ "ts-file.ts": { filename: "ts-file.ts" } });
        });
    });
});
