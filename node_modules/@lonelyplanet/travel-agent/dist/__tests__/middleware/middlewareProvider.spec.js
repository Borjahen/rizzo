"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var createPrometheusMiddlewareDefault = jest.fn();
jest.mock("../../middleware/prometheus", function () { return ({
    default: createPrometheusMiddlewareDefault,
}); });
var middlewareProvider_1 = require("../../middleware/middlewareProvider");
describe("middlewareProvider", function () {
    var use;
    var app;
    beforeEach(function () {
        use = jest.fn();
        app = { use: use };
    });
    afterEach(function () {
        use.mockReset();
    });
    describe("applyMiddleware", function () {
        it("should apply the middleware", function () {
            var middlewareA = jest.fn();
            var middlewareB = jest.fn();
            var middlewareC = jest.fn();
            var allMiddleware = middlewareProvider_1.applyMiddleware(app, [middlewareA, middlewareB], [middlewareC]);
            expect(use).toHaveBeenCalledWith(middlewareA);
            expect(use).toHaveBeenCalledWith(middlewareB);
            expect(use).toHaveBeenCalledWith(middlewareC);
            expect(allMiddleware).toEqual([middlewareA, middlewareB, middlewareC]);
        });
        it("should apply the middleware object (with resolve and route)", function () {
            var middlewareObject = {
                route: "route/to/middleware",
                resolve: jest.fn(function () { return "resolve called"; }),
                fn: jest.fn(),
            };
            var allMiddleware = middlewareProvider_1.applyMiddleware(app, [middlewareObject]);
            expect(use).toHaveBeenCalledWith("route/to/middleware", "resolve called");
            expect(allMiddleware).toEqual([middlewareObject]);
        });
        it("should apply the middleware object (with resolve, without route)", function () {
            var middlewareObject = {
                resolve: jest.fn(function () { return "resolve called"; }),
                fn: jest.fn(),
            };
            var allMiddleware = middlewareProvider_1.applyMiddleware(app, [middlewareObject]);
            expect(use).toHaveBeenCalledWith("/", "resolve called");
            expect(allMiddleware).toEqual([middlewareObject]);
        });
        it("should apply the middleware object (without resolve, with route)", function () {
            var foo = jest.fn();
            var middlewareObject = {
                route: "route/to/middleware",
                fn: foo,
            };
            var allMiddleware = middlewareProvider_1.applyMiddleware(app, [middlewareObject]);
            expect(use).toHaveBeenCalledWith("route/to/middleware", foo);
            expect(allMiddleware).toEqual([middlewareObject]);
        });
        it("should apply the middleware object (without resolve, without route)", function () {
            var foo = jest.fn();
            var middlewareObject = {
                fn: foo,
            };
            var allMiddleware = middlewareProvider_1.applyMiddleware(app, [middlewareObject]);
            expect(use).toHaveBeenCalledWith("/", foo);
            expect(allMiddleware).toEqual([middlewareObject]);
        });
        it("should apply the middleware array", function () {
            var foo = jest.fn(function (req, res, next) { return void 0; });
            var middlewareArray = [
                "middleware",
                foo,
            ];
            var allMiddleware = middlewareProvider_1.applyMiddleware(app, [middlewareArray]);
            expect(use).toHaveBeenCalledWith("middleware", foo);
            expect(allMiddleware).toEqual([middlewareArray]);
        });
    });
    describe("middleware", function () {
        var AppMock;
        var userConfigMiddleware;
        var MockCustomMiddlewareResolver;
        var mockDefaultMiddleware;
        var mockDefaultProductionMiddleware;
        var mockDefaultDevMiddleware;
        beforeEach(function () {
            AppMock = jest.fn(function () { return ({ use: jest.fn() }); });
            userConfigMiddleware = { middleware: jest.fn() };
            MockCustomMiddlewareResolver = jest.fn(function () { return ({
                resolve: function () { return userConfigMiddleware; },
            }); });
            mockDefaultMiddleware = jest.fn(function () { return [
                function (req, res, next) { return void 0; },
            ]; });
            mockDefaultProductionMiddleware = jest.fn(function () { return [
                function (req, res, next) { return void 0; },
            ]; });
            mockDefaultDevMiddleware = jest.fn(function () { return [
                function (req, res, next) { return void 0; },
            ]; });
        });
        afterEach(function () {
            AppMock.mockReset();
            userConfigMiddleware.middleware.mockReset();
            MockCustomMiddlewareResolver.mockReset();
            mockDefaultMiddleware.mockReset();
            mockDefaultProductionMiddleware.mockReset();
            mockDefaultDevMiddleware.mockReset();
        });
        it("should provide default middleware in the development environment", function () {
            var isProdEnv = "development";
            var provider = new middlewareProvider_1.default(isProdEnv, new MockCustomMiddlewareResolver());
            provider.defaultMiddleware = mockDefaultMiddleware;
            provider.defaultProductionMiddleware = mockDefaultProductionMiddleware;
            provider.defaultDevMiddleware = mockDefaultDevMiddleware;
            var middleware = provider.middleware(new AppMock());
            expect(middleware.length).toEqual(3);
            expect(mockDefaultMiddleware.mock.calls[0][0]).toEqual(userConfigMiddleware);
            expect(mockDefaultMiddleware).toHaveBeenCalledTimes(1);
            expect(mockDefaultDevMiddleware.mock.calls[0][0]).toEqual(userConfigMiddleware);
            expect(mockDefaultDevMiddleware).toHaveBeenCalledTimes(1);
            expect(mockDefaultProductionMiddleware).toHaveBeenCalledTimes(0);
        });
        it("should provide default middleware in the production environment", function () {
            var isProdEnv = "production";
            var provider = new middlewareProvider_1.default(isProdEnv, new MockCustomMiddlewareResolver());
            provider.defaultMiddleware = mockDefaultMiddleware;
            provider.defaultProductionMiddleware = mockDefaultProductionMiddleware;
            provider.defaultDevMiddleware = mockDefaultDevMiddleware;
            var middleware = provider.middleware(new AppMock());
            expect(middleware.length).toEqual(3);
            expect(mockDefaultMiddleware.mock.calls[0][0]).toEqual(userConfigMiddleware);
            expect(mockDefaultMiddleware).toHaveBeenCalledTimes(1);
            expect(mockDefaultDevMiddleware).toHaveBeenCalledTimes(0);
            expect(mockDefaultProductionMiddleware.mock.calls[0][0]).toEqual(userConfigMiddleware);
            expect(mockDefaultProductionMiddleware).toHaveBeenCalledTimes(1);
        });
    });
    describe("postMiddleware", function () {
        var AppMock;
        var userConfigMiddleware;
        var MockCustomMiddlewareResolver;
        var mockDefaultPostMiddleware;
        beforeEach(function () {
            AppMock = jest.fn(function () { return ({ use: jest.fn() }); });
            userConfigMiddleware = { middleware: jest.fn() };
            MockCustomMiddlewareResolver = jest.fn(function () { return ({
                resolve: function () { return userConfigMiddleware; },
            }); });
            mockDefaultPostMiddleware = jest.fn(function () { return [
                function (req, res, next) { return void 0; },
            ]; });
        });
        afterEach(function () {
            AppMock.mockReset();
            userConfigMiddleware.middleware.mockReset();
            MockCustomMiddlewareResolver.mockReset();
            mockDefaultPostMiddleware.mockReset();
        });
        it("should provide post middleware (without user specified postMiddleware)", function () {
            var isProdEnv = "development";
            var App = new AppMock();
            var provider = new middlewareProvider_1.default(isProdEnv, new MockCustomMiddlewareResolver());
            provider.defaultPostMiddleware = mockDefaultPostMiddleware;
            var middleware = provider.postMiddleware(App);
            expect(middleware.length).toEqual(1);
            expect(mockDefaultPostMiddleware.mock.calls[0][0]).toEqual(false);
            expect(mockDefaultPostMiddleware.mock.calls[0][1]).toEqual(userConfigMiddleware);
            expect(mockDefaultPostMiddleware.mock.calls[0][2]).toEqual(App);
            expect(mockDefaultPostMiddleware).toHaveBeenCalledTimes(1);
        });
        it("should provide post middleware (with user specified postMiddleware)", function () {
            var isProdEnv = "production";
            var App = new AppMock();
            userConfigMiddleware = {
                middleware: jest.fn(),
                postMiddleware: jest.fn(),
            };
            MockCustomMiddlewareResolver = jest.fn(function () { return ({
                resolve: function () { return userConfigMiddleware; },
            }); });
            var provider = new middlewareProvider_1.default(isProdEnv, new MockCustomMiddlewareResolver());
            provider.defaultPostMiddleware = mockDefaultPostMiddleware;
            var middleware = provider.postMiddleware(App);
            expect(middleware.length).toEqual(2);
            expect(mockDefaultPostMiddleware.mock.calls[0][0]).toEqual(true);
            expect(mockDefaultPostMiddleware.mock.calls[0][1]).toEqual(userConfigMiddleware);
            expect(mockDefaultPostMiddleware.mock.calls[0][2]).toEqual(App);
            expect(mockDefaultPostMiddleware).toHaveBeenCalledTimes(1);
        });
    });
    describe("beforeRoutesMiddleware", function () {
        var AppMock;
        var userConfigMiddleware;
        var MockCustomMiddlewareResolver;
        beforeEach(function () {
            AppMock = jest.fn(function () { return ({
                use: jest.fn(),
                routes: [
                    {
                        url: "test1",
                        controller: { name: "controllerName" },
                        handler: "myHandler",
                    },
                ],
            }); });
            userConfigMiddleware = { middleware: jest.fn() };
            MockCustomMiddlewareResolver = jest.fn(function () { return ({
                resolve: function () { return userConfigMiddleware; },
            }); });
        });
        afterEach(function () {
            AppMock.mockReset();
            userConfigMiddleware.middleware.mockReset();
            MockCustomMiddlewareResolver.mockReset();
            createPrometheusMiddlewareDefault.mockReset();
        });
        it("should provide middleware", function () {
            var isProdEnv = "development";
            var provider = new middlewareProvider_1.default(isProdEnv, new MockCustomMiddlewareResolver());
            var middleware = provider.beforeRoutesMiddleware(new AppMock());
            expect(createPrometheusMiddlewareDefault.mock.calls[0][0]).toEqual({
                routes: [
                    {
                        route: "test1",
                        name: "controllerName#myHandler",
                    },
                ],
            });
            expect(createPrometheusMiddlewareDefault).toHaveBeenCalledTimes(1);
        });
    });
});
