"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _radium = require("radium");

var _radium2 = _interopRequireDefault(_radium);

var _colors = require("../../styles/colors");

var _colors2 = _interopRequireDefault(_colors);

var _color = require("../../utils/color");

var _icon = require("../../utils/icon");

var _icon2 = _interopRequireDefault(_icon);

var _icon3 = require("../icon");

var _icon4 = _interopRequireDefault(_icon3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mapMarker(_ref) {
  var poiType = _ref.poiType,
      size = _ref.size,
      hideShadow = _ref.hideShadow,
      inverse = _ref.inverse;

  var types = {
    sleeping: {
      icon: "Sleep",
      color: _colors2.default.accentPurple
    },
    drinking_nightlife: {
      icon: "Drink",
      color: _colors2.default.accentBlue
    },
    transport: {
      icon: "Transport",
      color: _colors2.default.accentGray
    },
    activities: {
      icon: "See",
      color: _colors2.default.poiSee
    },
    tours: {
      icon: "See",
      color: _colors2.default.poiSee
    },
    entertainment: {
      icon: "Play",
      color: _colors2.default.poiPlay
    },
    shopping: {
      icon: "Shop",
      color: _colors2.default.accentPink
    },
    eating: {
      icon: "Eat",
      color: _colors2.default.poiEat
    },
    restaurants: {
      icon: "Eat",
      color: _colors2.default.poiEat
    },
    sights: {
      icon: "See",
      color: _colors2.default.poiSee
    },
    info: {
      icon: "Default",
      color: _colors2.default.poiDefault
    },
    festivals_events: {
      icon: "Play",
      color: _colors2.default.poiPlay
    }
  };

  /**
   * Get a size (in pixels) to use in the CSS. A ratio is created by dividing a
   * given number by the default icon size (20). That ratio is then multiplied
   * by the size recieved in the componentâ€™s props to create a value that is
   * proportional to the size of the marker.
   * @param  {Number} number Pixel value of desired size
   * @return {Number}        Calculated pixel value
   */
  var getSize = function getSize(number) {
    return Math.ceil(size * (number / 20));
  };

  /**
   * Calculate the font size from the size (height, width). The ratio is
   * calculated by dividing 11 (which is the font size for a 20x20 icon) by 20
   * (which has been defined as the default size).
   */
  var fontSize = getSize(11);

  /**
   * Calculate the border width from the size (height, width). The ratio is
   * calculated by dividing 1 (which is the lowest posible width) by 20 (which
   * has been defined as the default size and is the smallest size that a 1px
   * border should be applied to).
   */
  var borderWidth = getSize(1);

  var styles = {
    container: {
      base: {
        borderRadius: "100%",
        backgroundColor: poiType === "center" ? _colors2.default.linkPrimary : types[poiType].color,
        color: _colors2.default.bgPrimary,
        borderColor: "rgba(" + (0, _color.rgb)(_colors2.default.shadowPrimary) + ", .12)",
        borderStyle: "solid",
        borderWidth: borderWidth / fontSize + "em",
        display: "inline-block",
        fontSize: fontSize + "px",
        height: size / fontSize + "em",
        lineHeight: 1,
        textAlign: "center",
        width: size / fontSize + "em"
      },

      shadow: {
        boxShadow: "0 " + getSize(1) / fontSize + "em\n          " + getSize(5) / fontSize + "em\n          rgba(" + (0, _color.rgb)(_colors2.default.shadowPrimary) + ", .25)"
      },

      inverse: {
        backgroundColor: _colors2.default.bgPrimary,
        borderColor: "transparent",
        borderWidth: 0,
        boxShadow: "0 0 " + getSize(5) / fontSize + "em\n          rgba(" + (0, _color.rgb)(_colors2.default.shadowPrimary) + ", .25)",
        color: poiType === "center" ? _colors2.default.linkPrimary : types[poiType].color
      }
    },

    icon: {
      base: {
        position: "relative",
        top: "50%",
        transform: "translateY(-50%)",
        verticalAlign: "top"
      }
    }
  };

  var MarkerIcon = (0, _icon2.default)("Map" + types[poiType].icon, {
    style: styles.icon.base,
    fill: inverse ? types[poiType].color : _colors2.default.bgPrimary
  });

  return _react2.default.createElement(
    "div",
    {
      className: "MapMarker",
      style: [styles.container.base, !hideShadow && styles.container.shadow, inverse && styles.container.inverse]
    },
    poiType === "center" ? _react2.default.createElement(_icon4.default.MapDefault, null) : MarkerIcon
  );
}

mapMarker.propTypes = {
  /**
   * A pre-defined POI type that maps to an icon; "center" is a custom value
   * that can be used to create an LP Blue marker that uses the default icon
   */
  poiType: _propTypes2.default.oneOf(["center", "activities", "drinking_nightlife", "eating", "entertainment", "festivals_events", "info", "restaurants", "shopping", "sights", "sleeping", "tours", "transport"]),

  /**
   * Number to define width and height
   */
  size: _propTypes2.default.number,

  /**
   * Whether or not to hide the shadow on the marker; note that the "inverse"
   * marker always has a shadow, regardless of the value of this prop
   */
  hideShadow: _propTypes2.default.bool,

  /**
   * Reverse the colors; the background becomes white and the icon a color
   */
  inverse: _propTypes2.default.bool
};

mapMarker.defaultProps = {
  poiType: "center",
  size: 20,
  hideShadow: false,
  inverse: false
};

// mapMarker.styles = styles;

exports.default = (0, _radium2.default)(mapMarker);