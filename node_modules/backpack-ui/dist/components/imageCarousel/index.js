"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _radium = require("radium");

var _radium2 = _interopRequireDefault(_radium);

var _reactSlick = require("react-slick");

var _reactSlick2 = _interopRequireDefault(_reactSlick);

var _kebabCase = require("lodash/kebabCase");

var _kebabCase2 = _interopRequireDefault(_kebabCase);

var _colors = require("../../styles/colors");

var _colors2 = _interopRequireDefault(_colors);

var _color = require("../../utils/color");

var _expandButton = require("../expandButton");

var _expandButton2 = _interopRequireDefault(_expandButton);

var _paginatorButton = require("../paginatorButton");

var _paginatorButton2 = _interopRequireDefault(_paginatorButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _ = { kebabCase: _kebabCase2.default };

var propTypes = {
  /**
   * Array of image paths
   */
  images: _propTypes2.default.array.isRequired,

  /**
   * Width and height of the image
   */
  imageSize: _propTypes2.default.array.isRequired,

  /**
   * Function called to go to the next slide; click handler is set via the
   * react-slick module
   * https://github.com/akiran/react-slick/blob/master/README.md#custom-nextprev-arrows
   */
  onNext: _propTypes2.default.func.isRequired,

  /**
   * Function called to go to the previous slide; click handler is set via the
   * react-slick module
   * https://github.com/akiran/react-slick/blob/master/README.md#custom-nextprev-arrows
   */
  onPrev: _propTypes2.default.func.isRequired,

  /**
   * Index of the starting slide; pass "null" to hide the buttonLabel
   */
  index: _propTypes2.default.number.isRequired,

  /**
   * Options for react-slick module
   * https://github.com/akiran/react-slick/blob/master/README.md
   */
  options: _propTypes2.default.object,

  /**
   * Function called to expand the full-screen gallery
   */
  onExpand: _propTypes2.default.func,

  /**
   * Callback function called before the current index changes
   */
  beforeChange: _propTypes2.default.func,

  /**
   * Callback function called after the current index changes
   */
  afterChange: _propTypes2.default.func,

  /**
   * Whether or not to hide prev and next buttons
   */
  hideNavigation: _propTypes2.default.bool
};

var defaultProps = {
  images: [],

  imageSize: [],

  onNext: function onNext() {},

  onPrev: function onPrev() {},

  index: 0,

  options: {
    dots: false,
    infinite: true,
    speed: 400,
    slidesToShow: 1,
    slidesToScroll: 1
  },

  onExpand: null,

  beforeChange: null,

  afterChange: null,

  hideNavigation: false
};

var styles = {
  container: {
    base: {
      backgroundColor: _colors2.default.borderPrimary,
      position: "relative"
    }
  },

  image: {
    base: {
      display: "block",
      width: "100%"
    },

    hidden: {
      opacity: 0
    }
  },

  expandButton: {
    base: {
      bottom: "12px",
      position: "absolute",
      right: "12px"
    }
  },

  paginationLabel: {
    base: {
      backgroundColor: "rgba(" + (0, _color.rgb)(_colors2.default.bgOverlay) + ", .6)",
      borderRadius: "1em",
      color: _colors2.default.bgPrimary,
      display: "block",
      fontSize: "8px",
      fontWeight: 600,
      lineHeight: 1,
      padding: 5 / 8 + "em " + 7.5 / 8 + "em " + 3 / 8 + "em",
      width: "auto"
    }
  }
};

function ImageCarousel(_ref) {
  var images = _ref.images,
      onNext = _ref.onNext,
      onPrev = _ref.onPrev,
      index = _ref.index,
      options = _ref.options,
      imageSize = _ref.imageSize,
      onExpand = _ref.onExpand,
      beforeChange = _ref.beforeChange,
      afterChange = _ref.afterChange,
      hideNavigation = _ref.hideNavigation;

  var buttonLabel = index !== null && images.length > 1 ? index + 1 + " / " + images.length : "";

  var parseImages = images.map(function (image) {
    return _react2.default.createElement(
      "div",
      { key: _.kebabCase(image) },
      _react2.default.createElement("div", {
        style: {
          backgroundImage: "url(" + image.replace(/ /g, "%20") + ")",
          backgroundPosition: "center",
          backgroundRepeat: "no-repeat",
          backgroundSize: "cover",
          paddingBottom: imageSize[1] / imageSize[0] * 100 + "%",
          width: "100%"
        }
      })
    );
  }

  // in case we want to roll back to images instead of backgrounds

  // return (
  //   <img
  //     key={_.kebabCase(image)}
  //     src={image}
  //     alt=""
  //   />
  // );
  );

  return images.length > 1 && _react2.default.createElement(
    "div",
    {
      className: "ImageCarousel",
      style: styles.container.base
    },
    _react2.default.createElement(
      _reactSlick2.default,
      (0, _extends3.default)({}, options, {
        beforeChange: beforeChange,
        afterChange: afterChange,
        prevArrow: !hideNavigation && _react2.default.createElement(_paginatorButton2.default, {
          direction: "left",
          align: "vertical",
          onClick: onPrev,
          offset: true
        }),
        nextArrow: !hideNavigation && _react2.default.createElement(_paginatorButton2.default, {
          direction: "right",
          align: "vertical",
          onClick: onNext,
          offset: true
        })
      }),
      parseImages
    ),
    onExpand && _react2.default.createElement(
      "div",
      {
        className: "ImageCarousel-expandButton",
        style: styles.expandButton.base
      },
      _react2.default.createElement(_expandButton2.default, {
        onClick: onExpand,
        label: buttonLabel
      })
    ),
    !onExpand && buttonLabel && _react2.default.createElement(
      "div",
      {
        className: "ImageCarousel-expandButton",
        style: styles.expandButton.base
      },
      _react2.default.createElement(
        "div",
        { style: styles.paginationLabel.base },
        buttonLabel
      )
    )
  );
}

ImageCarousel.propTypes = propTypes;
ImageCarousel.defaultProps = defaultProps;
ImageCarousel.displayName = "ImageCarousel";
ImageCarousel.styles = styles;

exports.default = (0, _radium2.default)(ImageCarousel);