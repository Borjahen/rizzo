"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _radium = require("radium");

var _radium2 = _interopRequireDefault(_radium);

var _colors = require("../../styles/colors");

var _colors2 = _interopRequireDefault(_colors);

var _mixins = require("../../utils/mixins");

var _schema = require("../../utils/schema");

var _schema2 = _interopRequireDefault(_schema);

var _moreLink = require("../moreLink");

var _moreLink2 = _interopRequireDefault(_moreLink);

var _staticMap = require("../staticMap");

var _staticMap2 = _interopRequireDefault(_staticMap);

var _createQAHook = require("../../utils/createQAHook");

var _createQAHook2 = _interopRequireDefault(_createQAHook);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Location(_ref) {
  var name = _ref.name,
      street = _ref.street,
      place = _ref.place,
      coordinates = _ref.coordinates,
      mobile = _ref.mobile,
      qaHook = _ref.qaHook;

  var styles = {
    container: {
      base: {}
    },

    address: {
      base: {}
    },

    directionsLink: {
      base: {
        borderTop: "1px solid " + _colors2.default.borderPrimary,
        display: "inline-block",
        marginTop: "10px",
        paddingRight: "13px",
        paddingTop: "13px"
      }
    },

    map: {
      base: {}
    }
  };

  var schemaProps = (0, _schema2.default)({
    itemProp: "address",
    itemType: "PostalAddress"
  });

  return _react2.default.createElement(
    "div",
    { className: "Location clearfix", style: styles.container.base },
    (street || place && place.length > 0 || coordinates) && _react2.default.createElement(
      "div",
      { className: "Location-address", style: [mobile && { float: "left" }] },
      (street || place && place.length > 0) && _react2.default.createElement(
        "div",
        schemaProps,
        street && _react2.default.createElement(
          "div",
          { itemProp: "streetAddress" },
          street
        ),
        place && place.length > 0 && _react2.default.createElement(
          "div",
          null,
          place.map(function (placeItem, i) {
            return _react2.default.createElement(
              "span",
              { key: placeItem.title + " span" },
              _react2.default.createElement(
                "a",
                {
                  key: placeItem.title,
                  style: (0, _mixins.blueLink)(),
                  href: placeItem.href,
                  "data-testid": qaHook ? (0, _createQAHook2.default)(placeItem.type, "place", "link") : null
                },
                _react2.default.createElement(
                  "span",
                  { itemProp: placeItem.type === "city" ? "addressLocality" : "addressCountry" },
                  placeItem.title
                )
              ),
              i !== place.length - 1 && ", "
            );
          })
        )
      ),
      coordinates && mobile && _react2.default.createElement(
        "div",
        { style: styles.directionsLink.base },
        _react2.default.createElement(
          _moreLink2.default,
          {
            href: "https://www.google.com/maps/place/" + (name.split(" ").join("+") + ",") + (coordinates[1] + "," + coordinates[0]),
            size: "small"
          },
          "Get directions"
        )
      )
    ),
    coordinates && _react2.default.createElement(
      "div",
      {
        className: "Location-map",
        style: [mobile && { float: "right", marginTop: "-26px" }]
      },
      _react2.default.createElement(_staticMap2.default, {
        location: coordinates.join(","),
        size: mobile ? "88x88" : "278x90",
        sidebar: !mobile,
        hideAttribution: mobile,
        name: name,
        url: mobile ? "https://www.google.com/maps/place/" + (name.split(" ").join("+") + ",") + (coordinates[1] + "," + coordinates[0]) : ""
      })
    )
  );
}

Location.propTypes = {
  /**
   * Name of the location; used for the static map and in the Google URL with
   * the coordinates
   */
  name: _propTypes2.default.string.isRequired,

  /**
   * Street address of the location
   */
  street: _propTypes2.default.string.isRequired,

  /**
   * An array of containing places, usually city and country
   */
  place: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    href: _propTypes2.default.string,
    title: _propTypes2.default.string,
    type: _propTypes2.default.string
  })).isRequired,

  /**
   * An array of latitude and longitude coordinates; used in the Google URL
   */
  coordinates: _propTypes2.default.arrayOf(_propTypes2.default.number).isRequired,

  /**
   * Should mobile-specific styles and props be used
   */
  mobile: _propTypes2.default.bool.isRequired,

  /**
   * Should add data-qa if true
   */
  qaHook: _propTypes2.default.bool
};

Location.defaultProps = {
  name: "",
  street: "",
  place: null,
  coordinates: null,
  mobile: false,
  qaHook: false
};

exports.default = (0, _radium2.default)(Location);