"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MultiStepWrapper = (_temp = _class = function (_React$Component) {
  (0, _inherits3.default)(MultiStepWrapper, _React$Component);

  function MultiStepWrapper(props) {
    (0, _classCallCheck3.default)(this, MultiStepWrapper);

    var _this = (0, _possibleConstructorReturn3.default)(this, (MultiStepWrapper.__proto__ || (0, _getPrototypeOf2.default)(MultiStepWrapper)).call(this, props));

    var initialStep = props.initialStep,
        totalSteps = props.totalSteps;


    _this.state = {
      currentStep: initialStep && initialStep <= totalSteps ? initialStep : 1
    };
    return _this;
  }

  (0, _createClass3.default)(MultiStepWrapper, [{
    key: "setCurrentStep",
    value: function setCurrentStep(step) {
      this.setState({
        currentStep: step <= this.props.totalSteps ? step : this.state.currentStep
      });
    }
  }, {
    key: "goToNextStep",
    value: function goToNextStep() {
      if (this.state.currentStep < this.props.totalSteps) {
        this.setCurrentStep(this.state.currentStep + 1);
      }
    }
  }, {
    key: "goToPreviousStep",
    value: function goToPreviousStep() {
      if (this.state.currentStep !== 1) {
        this.setCurrentStep(this.state.currentStep - 1);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children(this.state.currentStep, this.goToNextStep.bind(this), this.goToPreviousStep.bind(this), this.setCurrentStep.bind(this));
    }
  }]);
  return MultiStepWrapper;
}(_react2.default.Component), _class.propTypes = {
  children: _propTypes2.default.func.isRequired,
  totalSteps: _propTypes2.default.number.isRequired,
  initialStep: _propTypes2.default.number
}, _temp);
exports.default = MultiStepWrapper;