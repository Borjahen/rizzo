"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp2;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _jsCookie = require("js-cookie");

var _jsCookie2 = _interopRequireDefault(_jsCookie);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_ORIGIN_LONDON = {
  city: "London",
  country: "UK",
  latLon: [51.5074, 0.1278],
  currency: "USD"
};

var FlightQuoteFetcher = (_temp2 = _class = function (_React$Component) {
  (0, _inherits3.default)(FlightQuoteFetcher, _React$Component);

  function FlightQuoteFetcher() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, FlightQuoteFetcher);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FlightQuoteFetcher.__proto__ || (0, _getPrototypeOf2.default)(FlightQuoteFetcher)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      quote: null,
      currency: "USD",
      foundResults: null,
      loading: true,
      error: false
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(FlightQuoteFetcher, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.fetchFlightQuote();
    }
  }, {
    key: "fetchFlightQuote",
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var _props, fallBackOrigin, destination, _ref3, country, currency, latLon, _latLon, lat, long, quoteResponse, quotes;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _props = this.props, fallBackOrigin = _props.fallBackOrigin, destination = _props.destination;
                _context.next = 3;
                return FlightQuoteFetcher.userInfo(fallBackOrigin);

              case 3:
                _ref3 = _context.sent;
                country = _ref3.country;
                currency = _ref3.currency;
                latLon = _ref3.latLon;
                _latLon = (0, _slicedToArray3.default)(latLon, 2), lat = _latLon[0], long = _latLon[1];
                _context.prev = 8;
                _context.next = 11;
                return fetch("https://www.lonelyplanet.com/flights/api/quote?country=" + country + "&currency=" + currency + "&locale=en-US&" + ("destinationAtlasId=" + destination.id + "&from=anytime&to=anytime&originLat=" + lat + "&originLon=" + long));

              case 11:
                quoteResponse = _context.sent;
                _context.next = 14;
                return quoteResponse.json();

              case 14:
                quotes = _context.sent;

                this.setState({
                  quote: quotes[0],
                  foundResults: quotes && quotes.length && quotes[0].outboundLeg,
                  loading: false,
                  currency: currency
                });
                _context.next = 21;
                break;

              case 18:
                _context.prev = 18;
                _context.t0 = _context["catch"](8);

                this.setState({
                  loading: false,
                  error: true
                });

              case 21:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[8, 18]]);
      }));

      function fetchFlightQuote() {
        return _ref2.apply(this, arguments);
      }

      return fetchFlightQuote;
    }()
  }, {
    key: "render",
    value: function render() {
      var destination = this.props.destination;
      var _state = this.state,
          loading = _state.loading,
          currency = _state.currency,
          quote = _state.quote,
          foundResults = _state.foundResults,
          error = _state.error;


      return this.props.render({ loading: loading, currency: currency, destination: destination, foundResults: foundResults, quote: quote, error: error });
    }
  }], [{
    key: "userInfo",
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        var fallBackOrigin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var city, latLon, country, currency, response;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                city = fallBackOrigin.city, latLon = fallBackOrigin.latLon, country = fallBackOrigin.country, currency = fallBackOrigin.currency;
                // First requeset intentionally empty and only used
                // to retrieve the headers needed for the second request

                _context2.next = 4;
                return fetch("https://www.lonelyplanet.com//flights/api/quote", {
                  method: "GET"
                });

              case 4:
                response = _context2.sent;

                if (response.headers.has("X-GeoIP-City")) {
                  city = response.headers.get("X-GeoIP-City");
                }

                if (response.headers.has("X-GeoIP-Latitude") && response.headers.has("X-GeoIP-Longitude")) {
                  latLon = [response.headers.get("X-GeoIP-Latitude"), response.headers.get("X-GeoIP-Longitude")];
                }

                if (response.headers.has("X-GeoIP-CountryCode")) {
                  country = response.headers.get("X-GeoIP-CountryCode");
                }
                if (_jsCookie2.default.get("lpCurrency")) {
                  currency = _jsCookie2.default.get("lpCurrency");
                }

                return _context2.abrupt("return", {
                  city: city,
                  country: country,
                  currency: currency,
                  latLon: latLon
                });

              case 12:
                _context2.prev = 12;
                _context2.t0 = _context2["catch"](0);
                return _context2.abrupt("return", fallBackOrigin);

              case 15:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[0, 12]]);
      }));

      function userInfo() {
        return _ref4.apply(this, arguments);
      }

      return userInfo;
    }()
  }]);
  return FlightQuoteFetcher;
}(_react2.default.Component), _class.propTypes = {
  destination: _propTypes2.default.shape({
    name: _propTypes2.default.string,
    id: _propTypes2.default.string
  }),
  fallBackOrigin: _propTypes2.default.shape({
    city: _propTypes2.default.string,
    country: _propTypes2.default.string,
    latLon: _propTypes2.default.arrayOf(_propTypes2.default.number)
  }),
  render: _propTypes2.default.function
}, _class.defaultProps = {
  fallBackOrigin: DEFAULT_ORIGIN_LONDON
}, _temp2);
exports.default = FlightQuoteFetcher;